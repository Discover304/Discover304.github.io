<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haobo&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/ab3d855fe5c65deed5c8f765972aac7c</icon>
  <subtitle>杨昊波的博客</subtitle>
  <link href="http://discover304.github.io/atom.xml" rel="self"/>
  
  <link href="http://discover304.github.io/"/>
  <updated>2020-12-30T02:46:09.978Z</updated>
  <id>http://discover304.github.io/</id>
  
  <author>
    <name>Discover304</name>
    <email>hobart.yang@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>13-Xml-and-Json</title>
    <link href="http://discover304.github.io/2020/12/30/13-xml-and-json/"/>
    <id>http://discover304.github.io/2020/12/30/13-xml-and-json/</id>
    <published>2020-12-30T02:42:25.000Z</published>
    <updated>2020-12-30T02:46:09.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写入-json-数据"><a class="markdownIt-Anchor" href="#写入-json-数据"></a> 写入 JSON 数据</h2><p>with open(‘data.json’, ‘w’) as f:<br />json.dump(data, f)</p><h2 id="读取数据"><a class="markdownIt-Anchor" href="#读取数据"></a> 读取数据</h2><p>with open(‘data.json’, ‘r’) as f:<br />data = json.load(f)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写入-json-数据&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#写入-json-数据&quot;&gt;&lt;/a&gt; 写入 JSON 数据&lt;/h2&gt;
&lt;p&gt;with open(‘data.json’, ‘w’) as f:&lt;br /&gt;
json.dum</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="GeneralNote" scheme="http://discover304.github.io/categories/NoteBook/GeneralNote/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="http://discover304.github.io/tags/Python/"/>
    
    <category term="对比" scheme="http://discover304.github.io/tags/%E5%AF%B9%E6%AF%94/"/>
    
    <category term="XML" scheme="http://discover304.github.io/tags/XML/"/>
    
    <category term="Json" scheme="http://discover304.github.io/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>怎样合理利用 Python 的 Package</title>
    <link href="http://discover304.github.io/2020/12/28/12-python-module-and-package/"/>
    <id>http://discover304.github.io/2020/12/28/12-python-module-and-package/</id>
    <published>2020-12-28T07:40:51.000Z</published>
    <updated>2020-12-28T15:20:02.556Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>python 是通过module组织代码的，每一个module就是一个python文件，但是modules是通过 package 来组织的。</p></blockquote><h2 id="python-package-的定义"><a class="markdownIt-Anchor" href="#python-package-的定义"></a> python package 的定义</h2><p>package 的定义很简单，在当面目录下有 <code>__init__.py</code> 文件的目录即为一个 package 。</p><p>不管 <code>__init__.py</code> 是空的还是有内容的，这个目录都会被认为是一个 package ，<strong>这是一个标识</strong>。</p><p>Python 的 package 以及 package 中的 <code>__init__.py</code> 共同决定了 package 中的 module 是如何被外界访问的。</p><h2 id="__init__py-内的导入顺序"><a class="markdownIt-Anchor" href="#__init__py-内的导入顺序"></a> <code>__init__.py</code> 内的导入顺序</h2><p>这个在解决重写的问题时会很有用，探究过程就如这篇<a href="https://www.jianshu.com/p/178c26789011">博客</a>所说的，这里只放结论。</p><p>检查顺序如下：</p><ol><li><code>__init__.py</code> 文件内变量</li><li>是不是 package 内的subpackage</li><li>是不是 package 内的module</li></ol><h2 id="__init__py-的写法"><a class="markdownIt-Anchor" href="#__init__py-的写法"></a> <code>__init__.py</code> 的写法</h2><p>这个文件本质上和我们平常写的python文件没有太大的区别，但是要注意两点：</p><ol><li>保证 <code>__init__.py</code> 轻量化，最小化其中代码的副作用，最好全部打包成函数。</li><li>把本模块里面的公用的method在 <code>__init__.py</code> 的时候暴露出来，这样在其他地方的引用就不需要引用具体位置，只需要引用这个包就好了。</li></ol><p>跳转链接: <a href="#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-package">使用自定义的 package</a></p><blockquote><p>下面这个原先的版本应该是 python 2 的，python 3 完全不同了，所以进行了一些删减，仅仅作为小知识点。</p></blockquote><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">定义 "__all__" 变量</button></li><li class="tab"><button type="button" data-href="#-2">一个一个导入</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>到这里我们想到的第一件事情就是把我们的元素都导入，于是我们就想到使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>因为 <code>*</code> 实在是范围太广了，那么如何决定哪些是可以导入的呢？这里我们引入变量 <code>__all__</code>。</p><p><code>__all__</code> 是 <code>__init__.py</code> 文件中的一个列表型变量，通过定义 <code>__all__</code> 我们可以规定 <code>from module import *</code> 可以导入的元素有哪些。我们只需要在 <code>__init__.py</code> 中添加一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">&quot;module0&quot;</span>, <span class="string">&quot;moduole1&quot;</span>, <span class="string">&quot;module2&quot;</span>, ···]</span><br></pre></td></tr></table></figure><p>之后Python会按顺序逐一导入列表中的元素。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>这个就很直接了，我们不使用 <code>*</code> 就一个一个得导入。</p><p>导出将按照以下规则执行：</p><ul><li>此 package 被导入</li><li>执行 <code>__init__.py</code> 中可被执行的代码</li><li><code>__init__.py</code> 中定义的 variable 被导入</li><li>被<strong>显式导入</strong>的 module 被导入</li></ul><p>所以也可以侧面反应我们的 <code>__all__</code> 变量的作用是怎样的了。能够节省一定的时间。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="在-class-已经足以解决大部分问题的当下为什么需要-package"><a class="markdownIt-Anchor" href="#在-class-已经足以解决大部分问题的当下为什么需要-package"></a> 在 class 已经足以解决大部分问题的当下，为什么需要 package ？</h2><p>首先随着项目的变大，通过 package 来整理项目变得尤为重要。</p><p>Python 是通过 module 组织代码的，module 即一个 py 文件，module 又是通过 package 来组织的， package 是一个包含 <code>__init__.py</code> 的文件夹，代码，module， package 它们三者的关系就是：module 包含代码， package 至少包含一个为 <code>__init__.py</code> 的 module。</p><p>这中间没有 class 的概念，class 更多是面向对象的时候使用的，可以作为 module 中的一个元素。</p><h2 id="使用自定义的-package"><a class="markdownIt-Anchor" href="#使用自定义的-package"></a> 使用自定义的 package</h2><p>跳转链接：<a href="#__init__py-%E7%9A%84%E5%86%99%E6%B3%95"><strong>init</strong>.py 的写法</a></p><p>这里有一个盲区，我们在使用 package 的时候往往不会放在某一个特定的仓库，只有完全标准化之后的 package 才会放到某一个地方保存好。</p><p>问题就来了，我们的工作目录往往不在系统路径下，也就是说没有把当前工作路径添加到System Variable Path。我们无法直接调用同一目录下的 package 。</p><p>所以我们需要做的事情是添加一个临时的系统路径，在import之前添加上这个系统路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;upper folder of the package &quot;</span>)</span><br></pre></td></tr></table></figure><p>这里我们需要把目标pakage的上层目录添加进path中，这样我们才能找到这个 package 。</p><p>如果我们的自定义 package 和 <code>main.py</code> 有相同的系统里路径，那就简单多了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.getcwd())</span><br></pre></td></tr></table></figure><p>然后我们有两种使用自定义 package 的方式如下所示。</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">空白 __init__.py</button></li><li class="tab"><button type="button" data-href="#-2">优化 __init__.py</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>这种就是比较直接的方法，我们在 <code>main.py</code> 中添加每一个 package 或者 subpackage 的路径，然后直接 import 进来。</p><p>代码举例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># we assume that the DIY package is under cwd</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.path.join(os.getcwd(), <span class="string">&#x27; package 0&#x27;</span>, <span class="string">&#x27; package 1&#x27;</span>))</span><br><span class="line">sys.path.append(os.path.join(os.getcwd(), <span class="string">&#x27; package 0&#x27;</span>, <span class="string">&#x27; package 2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> package <span class="number">0.</span> package <span class="number">1.</span>module0</span><br><span class="line"><span class="keyword">import</span> package <span class="number">0.</span> package <span class="number">2.</span>module1</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>这个如果要分类的话属于递归调用的方法，我们在每一层的 <code>__init__.py</code> 将路径临时添加进path中，保证了只要我们的最外层 package 的在path中了，我们剩下的 subpackage 都可以被索引到。</p><p>因此我们不需要再对我们的 <code>main.py</code> 做任何修改了。我们需要做的事情只有在每一个 <code>__init__.py</code> 中添加一层当前文件夹。</p><p>具体代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.path.join(os.getcwd(), <span class="string">&#x27;subpackage &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> subpackage <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>阅读 <code>__init__.py</code> 源码后发现大家写得都不太一样。但是相信基本思想就这些了，应该出入不大了。</p><h2 id="小知识点"><a class="markdownIt-Anchor" href="#小知识点"></a> 小知识点</h2><p>python中 r’string’, b’string’, u’string’, f’string’ 的含义：</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>r/R</td><td>非转义的原始字符串</td></tr><tr><td>b</td><td>bytes</td></tr><tr><td>u/U</td><td>表示unicode字符串</td></tr><tr><td>f/format()</td><td>格式化操作</td></tr></tbody></table><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><ol><li><a href="https://www.cnblogs.com/wanghuaijun/p/6692458.html">Python 基础教程之包和类的用法</a></li><li><a href="https://docs.python.org/3/tutorial/modules.html">Python Modules and package s</a></li><li><a href="https://www.jianshu.com/p/178c26789011">彻底明白Python package 和模块</a></li><li><a href="https://sanyuesha.com/2017/09/14/deep-understand-python-package/">深入理解 Python package</a></li><li><a href="https://www.cnblogs.com/yu-liang/p/9102016.html">python3 模块和包</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;python 是通过module组织代码的，每一个module就是一个python文件，但是modules是通过 package 来组织的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;python-package-的定义&quot;&gt;&lt;a clas</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="GeneralNote" scheme="http://discover304.github.io/categories/NoteBook/GeneralNote/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="http://discover304.github.io/tags/Python/"/>
    
    <category term="积累" scheme="http://discover304.github.io/tags/%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python 解析 Xml 格式的文档</title>
    <link href="http://discover304.github.io/2020/12/27/11-Python-xml-class/"/>
    <id>http://discover304.github.io/2020/12/27/11-Python-xml-class/</id>
    <published>2020-12-27T13:42:45.000Z</published>
    <updated>2020-12-28T02:10:20.787Z</updated>
    
    <content type="html"><![CDATA[<p>xml 文档，无非就是一个树状的数据仓库，最基础的部分也就四个：增删改查。</p><h2 id="解析树状结构"><a class="markdownIt-Anchor" href="#解析树状结构"></a> 解析树状结构</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">从硬盘读取</button></li><li class="tab"><button type="button" data-href="#-2">从字符串读取</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>注意：xml.etree.ElementTree模块在应对恶意结构数据时显得并不安全。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree</span><br><span class="line"></span><br><span class="line"><span class="comment"># import data from our dataset</span></span><br><span class="line">tree = ElementTree.parse([path of xml file])</span><br><span class="line"></span><br><span class="line"><span class="comment"># pick the root of xml tree</span></span><br><span class="line">root = tree.getroot()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>注意：从字符串读取时不需要parse，因为fromstring直接返回的就是我们的root节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree</span><br><span class="line"></span><br><span class="line"><span class="comment"># pick the root of xml tree</span></span><br><span class="line">root = ElementTree.fromstring(country_data_as_string)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>其中，tree比较好理解，就是我们的xml文件的树。root也就是我们的根节点。</p><p>root属于element对象，有以下几个属性：</p><ol><li>tag：string对象，表示数据代表的种类。</li><li>attrib：dictionary对象，表示附有的属性。</li><li>text：string对象，表示element的内容。</li><li>tail：string对象，表示element闭合之后的尾迹。</li><li>若干子元素（child elements）。这些子元素可以通过index索引。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span> <span class="attr">attrib1</span>=<span class="string">1</span>&gt;</span>text<span class="tag">&lt;/<span class="name">tag</span>&gt;<span class="name">tail</span></span></span><br><span class="line">  1     2        3         4</span><br></pre></td></tr></table></figure><p>小技巧：若想加快速度，可以使用C语言编译的API xml.etree.cElementTree。在import时考虑优先导入，代码修改如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br></pre></td></tr></table></figure><h2 id="elementtreeelement-class"><a class="markdownIt-Anchor" href="#elementtreeelement-class"></a> ElementTree.Element Class</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xml</span>.<span class="title">etree</span>.<span class="title">ElementTree</span>.<span class="title">Element</span>(<span class="params">tag, attrib=&#123;&#125;, **extra</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    # 属性</span></span><br><span class="line"><span class="class">    <span class="title">tag</span>：<span class="title">string</span>，元素代表的数据种类。</span></span><br><span class="line"><span class="class">    <span class="title">attrib</span>：<span class="title">dictionary</span>，元素的属性字典。</span></span><br><span class="line"><span class="class">    <span class="title">text</span>：<span class="title">string</span>，元素的内容。</span></span><br><span class="line"><span class="class">    <span class="title">tail</span>：<span class="title">string</span>，元素的尾形。</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">    # 针对属性的操作</span></span><br><span class="line"><span class="class">    <span class="title">clear</span>()：清空元素的后代、属性、<span class="title">text</span>和<span class="title">tail</span>也设置为<span class="title">None</span>。</span></span><br><span class="line"><span class="class">    <span class="title">get</span>(<span class="params">key, default=<span class="literal">None</span></span>)：获取<span class="title">key</span>对应的属性值，如该属性不存在则返回<span class="title">default</span>值。</span></span><br><span class="line"><span class="class">    <span class="title">items</span>()：根据属性字典返回一个列表，列表元素为(<span class="params">key, value</span>)。</span></span><br><span class="line"><span class="class">    <span class="title">keys</span>()：返回包含所有元素属性键的列表。</span></span><br><span class="line"><span class="class">    <span class="title">set</span>(<span class="params">key, value</span>)：设置新的属性键与值。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    # 针对后代的操作</span></span><br><span class="line"><span class="class">    ## 增加新的<span class="title">element</span></span></span><br><span class="line"><span class="class">    <span class="title">append</span>(<span class="params">subelement</span>)：添加直系子元素。</span></span><br><span class="line"><span class="class">    <span class="title">extend</span>(<span class="params">subelements</span>)：增加一串元素对象作为子元素。</span></span><br><span class="line"><span class="class">    <span class="title">insert</span>(<span class="params">index, element</span>)：在指定位置插入子元素。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    ## 删除<span class="title">element</span></span></span><br><span class="line"><span class="class">    <span class="title">remove</span>(<span class="params">subelement</span>)：删除子元素。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    ## 遍历<span class="title">elements</span>，得到<span class="title">iter</span>或者<span class="title">list</span></span></span><br><span class="line"><span class="class">    <span class="title">find</span>(<span class="params">match</span>)：寻找第一个匹配子元素，匹配对象可以为<span class="title">tag</span>或<span class="title">path</span>。</span></span><br><span class="line"><span class="class">    <span class="title">findall</span>(<span class="params">match</span>)：寻找所有匹配子元素，匹配对象可以为<span class="title">tag</span>或<span class="title">path</span>。</span></span><br><span class="line"><span class="class">    <span class="title">findtext</span>(<span class="params">match</span>)：寻找第一个匹配子元素，返回其<span class="title">text</span>值。匹配对象可以为<span class="title">tag</span>或<span class="title">path</span>。</span></span><br><span class="line"><span class="class">    <span class="title">iter</span>(<span class="params">tag=<span class="literal">None</span></span>)：生成遍历当前元素所有后代或者给定<span class="title">tag</span>的后代的迭代器。</span></span><br><span class="line"><span class="class">    <span class="title">iterfind</span>(<span class="params">match</span>)：根据<span class="title">tag</span>或<span class="title">path</span>查找所有的后代。</span></span><br><span class="line"><span class="class">    <span class="title">itertext</span>()：遍历所有后代并返回<span class="title">text</span>值。</span></span><br></pre></td></tr></table></figure><h2 id="elementtree-object"><a class="markdownIt-Anchor" href="#elementtree-object"></a> ElementTree Object</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xml</span>.<span class="title">etree</span>.<span class="title">ElementTree</span>.<span class="title">ElementTree</span>(<span class="params">element=<span class="literal">None</span>, file=<span class="literal">None</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">element</span>如果给定，则为新的<span class="title">ElementTree</span>的根节点。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">_setroot</span>(<span class="params">element</span>)：用给定的<span class="title">element</span>替换当前的根节点。慎用。</span></span><br><span class="line"><span class="class">    <span class="title">getroot</span>()：获取根节点。</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">    <span class="title">parse</span>(<span class="params">source, parser=<span class="literal">None</span></span>)：装载<span class="title">xml</span>对象，<span class="title">source</span>可以为文件名或文件类型对象。</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">    # 写回方法<span class="title">write</span></span></span><br><span class="line"><span class="class">    <span class="title">write</span>(<span class="params">file, encoding=<span class="string">&quot;us-ascii&quot;</span>, xml_declaration=<span class="literal">None</span>, default_namespace=<span class="literal">None</span>,method=<span class="string">&quot;xml&quot;</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    # 以下方法与<span class="title">Element</span>类中同名方法近似，区别在于它们指定以根节点作为操作对象。</span></span><br><span class="line"><span class="class">    <span class="title">find</span>(<span class="params">match</span>)</span></span><br><span class="line"><span class="class">    <span class="title">findall</span>(<span class="params">match</span>)</span></span><br><span class="line"><span class="class">    <span class="title">findtext</span>(<span class="params">match, default=<span class="literal">None</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">iter</span>(<span class="params">tag=<span class="literal">None</span></span>)</span></span><br><span class="line"><span class="class">    <span class="title">iterfind</span>(<span class="params">match</span>)</span></span><br></pre></td></tr></table></figure><h2 id="增删改查"><a class="markdownIt-Anchor" href="#增删改查"></a> 增删改查</h2><p>我思考了一下，面向对象的方法更容易思考，也更容易整理思路。在实际使用的时候要把上面的这些作为某一个xml文件对象的方法然后整理成一个单独的Class。</p><p>AI-tuner 小项目中的实际应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xmlResolver</span>(<span class="params">xmlFilePath</span>)</span></span><br><span class="line"><span class="class">    <span class="title">xmlWri</span></span></span><br></pre></td></tr></table></figure><h2 id="python-面向对象回顾"><a class="markdownIt-Anchor" href="#python-面向对象回顾"></a> Python 面向对象回顾</h2><h3 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h3><p>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。</p><p><strong>init</strong>()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法。</p><h3 id="类的内置属性"><a class="markdownIt-Anchor" href="#类的内置属性"></a> 类的内置属性</h3><p><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）</p><p><strong>doc</strong> :类的文档字符串</p><p><strong>name</strong>: 类名</p><p><strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）</p><p><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</p><h3 id="子类父类"><a class="markdownIt-Anchor" href="#子类父类"></a> 子类父类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名(<span class="params">基类名</span>)</span></span><br><span class="line"><span class="class">    ...</span></span><br></pre></td></tr></table></figure><p>注意：python允许多父类继承，叫做多重继承。</p><p>然后方法重写的概念在python中是指子类重写父类的方法，这一点和Java有出入。</p><h3 id="基础的重载方法"><a class="markdownIt-Anchor" href="#基础的重载方法"></a> 基础的重载方法</h3><table><thead><tr><th>序号</th><th>方法</th><th>描述</th><th>简单应用</th></tr></thead><tbody><tr><td>1</td><td><strong>init</strong> ( self [,args…] )</td><td>构造函数</td><td>简单的调用方法: obj = className(args)</td></tr><tr><td>2</td><td><strong>del</strong>( self )</td><td>析构方法, 删除一个对象</td><td>简单的调用方法 : del obj</td></tr><tr><td>3</td><td><strong>repr</strong>( self )</td><td>转化为供解释器读取的形式</td><td>简单的调用方法 : repr(obj)</td></tr><tr><td>4</td><td><strong>str</strong>( self )</td><td>用于将值转化为适于人阅读的形式</td><td>简单的调用方法 : str(obj)</td></tr><tr><td>5</td><td><strong>cmp</strong> ( self, x )</td><td>对象比较</td><td>简单的调用方法 : cmp(obj, x)</td></tr></tbody></table><h3 id="私有类方法"><a class="markdownIt-Anchor" href="#私有类方法"></a> 私有类方法</h3><p>__private_method：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 self.__private_methods</p><h3 id="单下划线-双下划线-头尾双下划线说明"><a class="markdownIt-Anchor" href="#单下划线-双下划线-头尾双下划线说明"></a> 单下划线、双下划线、头尾双下划线说明</h3><p><strong>foo</strong>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong>init</strong>() 之类的。</p><p>_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *</p><p>__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ol><li><a href="https://www.cnblogs.com/awakenedy/articles/9305336.html">Python 标准库之 xml.etree</a></li><li><a href="https://www.runoob.com/python/python-object.html">Python 面向对象</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;xml 文档，无非就是一个树状的数据仓库，最基础的部分也就四个：增删改查。&lt;/p&gt;
&lt;h2 id=&quot;解析树状结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解析树状结构&quot;&gt;&lt;/a&gt; 解析树状结构&lt;/h2&gt;
&lt;div class=&quot;tabs&quot; </summary>
      
    
    
    
    <category term="Library" scheme="http://discover304.github.io/categories/Library/"/>
    
    <category term="Collection" scheme="http://discover304.github.io/categories/Library/Collection/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="http://discover304.github.io/tags/Python/"/>
    
    <category term="积累" scheme="http://discover304.github.io/tags/%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="XML" scheme="http://discover304.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>博客更新成 Butterfly Theme 的过程中遇到的问题</title>
    <link href="http://discover304.github.io/2020/12/26/10-Butterfly-hexo-theme-configuration-example/"/>
    <id>http://discover304.github.io/2020/12/26/10-Butterfly-hexo-theme-configuration-example/</id>
    <published>2020-12-26T06:58:18.000Z</published>
    <updated>2020-12-28T07:43:25.056Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章只是记录我在更新中遇到的问题，没有太多的价值了。</p><h2 id="post-front-matter"><a class="markdownIt-Anchor" href="#post-front-matter"></a> <a href="https://butterfly.js.org/posts/dc584b87/#%E5%89%B5%E5%BB%BA%E5%8F%8B%E6%83%85%E9%8F%88%E6%8E%A5%E9%A0%81%E9%9D%A2">Post Front-matter</a></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">comments:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">toc:</span></span><br><span class="line"><span class="emphasis">toc_</span>number:</span><br><span class="line">copyright:</span><br><span class="line">copyright<span class="emphasis">_author:</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href:</span></span><br><span class="line"><span class="emphasis">copyright_</span>url:</span><br><span class="line">copyright<span class="emphasis">_info:</span></span><br><span class="line"><span class="emphasis">mathjax:</span></span><br><span class="line"><span class="emphasis">katex:</span></span><br><span class="line"><span class="emphasis">aplayer:</span></span><br><span class="line"><span class="emphasis">highlight_</span>shrink:</span><br><span class="line">aside:</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>寫法</th><th>解釋</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章標題</td></tr><tr><td>date</td><td>【必需】文章創建日期</td></tr><tr><td>updated</td><td>【可選】文章更新日期</td></tr><tr><td>tags</td><td>【可選】文章標籤</td></tr><tr><td>categories</td><td>【可選】文章分類</td></tr><tr><td>keywords</td><td>【可選】文章關鍵字</td></tr><tr><td>description</td><td>【可選】文章描述</td></tr><tr><td>top_img</td><td>【可選】文章頂部圖片</td></tr><tr><td>cover</td><td>【可選】文章縮略圖(如果沒有設置top_img,文章頁頂部將顯示縮略圖，可設為false/圖片地址/留空)</td></tr><tr><td>comments</td><td>【可選】顯示文章評論模塊(默認 true)</td></tr><tr><td>toc</td><td>【可選】顯示文章TOC(默認為設置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可選】顯示toc_number(默認為設置中toc的number配置)</td></tr><tr><td>copyright</td><td>【可選】顯示文章版權模塊(默認為設置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可選】文章版權模塊的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可選】文章版權模塊的文章作者鏈接</td></tr><tr><td>copyright_url</td><td>【可選】文章版權模塊的文章連結鏈接</td></tr><tr><td>copyright_info</td><td>【可選】文章版權模塊的版權聲明文字</td></tr><tr><td>mathjax</td><td>【可選】顯示mathjax(當設置mathjax的per_page: false時，才需要配置，默認 false)</td></tr><tr><td>katex</td><td>【可選】顯示katex(當設置katex的per_page: false時，才需要配置，默認 false)</td></tr><tr><td>aplayer</td><td>【可選】在需要的頁面加載aplayer的js和css,請參考文章下面的音樂 配置</td></tr><tr><td>highlight_shrink</td><td>【可選】配置代碼框是否展開(true/false)(默認為設置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可選】顯示側邊欄 (默認 true)</td></tr></tbody></table><h2 id="如何添加友情链接"><a class="markdownIt-Anchor" href="#如何添加友情链接"></a> 如何添加友情链接？</h2><p>首先是在目录<code>source/_date</code>下有一个叫做<code>link.yml</code>的文件，这个是用来配置添加哪些友情链接的。</p><h2 id="about没有一个很好的显示该这么办呢"><a class="markdownIt-Anchor" href="#about没有一个很好的显示该这么办呢"></a> about没有一个很好的显示，该这么办呢？</h2><p>about 可以放自己的 cv 所以并不去规范格式。</p><h2 id="有意思了这个网站可以找到好多的图标"><a class="markdownIt-Anchor" href="#有意思了这个网站可以找到好多的图标"></a> 有意思了，这个网站可以找到好多的图标</h2><p>网站链接: <a href="https://fontawesome.com/">https://fontawesome.com/</a></p><h2 id="如何将文章置顶呢"><a class="markdownIt-Anchor" href="#如何将文章置顶呢"></a> 如何将文章置顶呢？</h2><p>在<code>front-matter</code>中添加<code>sticky: 1</code>属性，数值越大，优先级越高</p><h2 id="如何添加cover呢"><a class="markdownIt-Anchor" href="#如何添加cover呢"></a> 如何添加cover呢？</h2><p>在<code>front-matter</code>中添加<code>cover: [a]</code>属性，a 可以是 left/right/both/false。false就是没有cover的模式。</p><h2 id="如何控制版权呢"><a class="markdownIt-Anchor" href="#如何控制版权呢"></a> 如何控制版权呢？</h2><p>一般会包含版权的，在不需要包含的文章可以添加<code>copyright: false</code>的属性。</p><p>如果是收录的文章，要单独设置：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copyright<span class="emphasis">_author: xxxx</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href: https://xxxxxx.com</span></span><br><span class="line"><span class="emphasis">copyright_</span>url: https://xxxxxx.com</span><br><span class="line">copyright<span class="emphasis">_info: 此文章版权归xxxxx所有，如有转载，请註明来自原作者</span></span><br></pre></td></tr></table></figure><h2 id="在footer添加备案号"><a class="markdownIt-Anchor" href="#在footer添加备案号"></a> 在footer添加备案号</h2><p>主题配置文件中的footer添加下面这个属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">footer</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;icp链接&quot;&gt;&lt;img</span> <span class="string">class=&quot;icp-icon&quot;</span> <span class="string">src=&quot;icp图片&quot;&gt;&lt;span&gt;备案号：xxxxxx&lt;/span&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="国内使用的icon仓库是哪一个呢"><a class="markdownIt-Anchor" href="#国内使用的icon仓库是哪一个呢"></a> 国内使用的icon仓库是哪一个呢？</h2><p>答案是：iconfont</p><h2 id="神奇的tabs"><a class="markdownIt-Anchor" href="#神奇的tabs"></a> 神奇的tabs</h2><p>之后可以尝试以一下，代码如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>还有很多新奇的操作，就不一一列举了</p><h2 id="记录使用lancecloud作为云存储"><a class="markdownIt-Anchor" href="#记录使用lancecloud作为云存储"></a> 记录：使用lancecloud作为云存储</h2><h2 id="可以给搜索引擎提交自己的网站使他可以被搜索到"><a class="markdownIt-Anchor" href="#可以给搜索引擎提交自己的网站使他可以被搜索到"></a> 可以给搜索引擎提交自己的网站，使他可以被搜索到。</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters/</span></span><br><span class="line"><span class="attr">google_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster/</span></span><br><span class="line"><span class="attr">bing_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site/</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 360 Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># see http://zhanzhang.so.com/</span></span><br><span class="line"><span class="attr">qihu_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification setting</span></span><br><span class="line"><span class="comment"># see https://webmaster.yandex.com/</span></span><br><span class="line"><span class="attr">yandex_site_verification:</span></span><br></pre></td></tr></table></figure><h2 id="math"><a class="markdownIt-Anchor" href="#math"></a> math</h2><p>我们使用katex来渲染latex math formula</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><msup><mn>1</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1+1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p><p>注意：我们需要在用到了latex formula的文档中添加<code>katex: true</code>的属性</p><h2 id="可不可以同时deploy到很多地方呢"><a class="markdownIt-Anchor" href="#可不可以同时deploy到很多地方呢"></a> 可不可以同时deploy到很多地方呢？</h2><p>PWA渐进式增强web应用</p><p>notice that pjax would not support some page need to exclude these pages</p><h2 id="gitalk-配置问题"><a class="markdownIt-Anchor" href="#gitalk-配置问题"></a> gitalk 配置问题</h2><p>太搞笑了，我的gitalk又出了https和http写错了的问题，这个会直接导致我的app报错</p><h2 id="改成中文的tags和英文的categories-以及修改cover-false"><a class="markdownIt-Anchor" href="#改成中文的tags和英文的categories-以及修改cover-false"></a> 改成中文的tags和英文的categories 以及修改cover: false</h2><p>Library ToolBook Collection</p><p>NoteBook GeneralNote ReadingNote</p><p>DailyLife Normal Special</p><p>Project Collaboration Solo</p><h2 id="leanscloud-踩坑"><a class="markdownIt-Anchor" href="#leanscloud-踩坑"></a> leansCloud 踩坑</h2><p>这个并不是必须的，在未来在博客中添加说说的时候可以使用这个。暂时不管。(可以是双评论系统)</p><h2 id="valine-静态评论系统魔改"><a class="markdownIt-Anchor" href="#valine-静态评论系统魔改"></a> valine 静态评论系统魔改</h2><p>这个链接有一些很有意思的标签配置：<a href="https://blog.csdn.net/weixin_43868299/article/details/108894568">https://blog.csdn.net/weixin_43868299/article/details/108894568</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章只是记录我在更新中遇到的问题，没有太多的价值了。&lt;/p&gt;
&lt;h2 id=&quot;post-front-matter&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#post-front-matter&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="Library" scheme="http://discover304.github.io/categories/Library/"/>
    
    <category term="ToolBook" scheme="http://discover304.github.io/categories/Library/ToolBook/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="参考" scheme="http://discover304.github.io/tags/%E5%8F%82%E8%80%83/"/>
    
    <category term="资料" scheme="http://discover304.github.io/tags/%E8%B5%84%E6%96%99/"/>
    
    <category term="模板" scheme="http://discover304.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 图片插入官方方法</title>
    <link href="http://discover304.github.io/2020/12/25/3-markdown_figure_practice/"/>
    <id>http://discover304.github.io/2020/12/25/3-markdown_figure_practice/</id>
    <published>2020-12-25T08:07:00.000Z</published>
    <updated>2020-12-27T03:42:04.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片导入示例"><a class="markdownIt-Anchor" href="#图片导入示例"></a> 图片导入示例</h2><p><img src="tho.gif" alt="芙兰朵露·斯卡蕾特" /></p><p>东方Project-<a href="https://zh.moegirl.org/%E8%8A%99%E5%85%B0%E6%9C%B5%E9%9C%B2%C2%B7%E6%96%AF%E5%8D%A1%E8%95%BE%E7%89%B9">芙兰朵露·斯卡蕾特</a></p><h2 id="具体的操作"><a class="markdownIt-Anchor" href="#具体的操作"></a> 具体的操作</h2><p>我在网上寻找到的帮助。找前辈的blog学习学习。</p><h3 id="1-markdown有几种方法新建图片下面是官方文档中给出的正常方法-但是不成功用不了呢-hexo官网链接"><a class="markdownIt-Anchor" href="#1-markdown有几种方法新建图片下面是官方文档中给出的正常方法-但是不成功用不了呢-hexo官网链接"></a> 1. markdown有几种方法新建图片，下面是官方文档中给出的正常方法。但是，不成功，用不了呢。<a href="https://hexo.io/zh-cn/docs/">hexo官网链接</a></h3>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_img tho.jpg 芙兰朵露·斯卡蕾特 %&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-提前说明使用的插件或功能格式"><a class="markdownIt-Anchor" href="#2-提前说明使用的插件或功能格式"></a> 2. 提前说明使用的插件或功能格式</h3><p>这是我在之前的blog中使用的，莫名其妙的很好用，但是不适合现在的版本，所以 pass。</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_img%&#125;</span></span><br><span class="line"><span class="emphasis">![<span class="string">芙兰朵露·斯卡蕾特</span>](<span class="link">markdown_figure_practice/tho.gif</span>)</span></span><br><span class="line"><span class="emphasis">&lt;!-- 这是注释：有了&#123;% asset_</span>img%&#125;，他的接下来一行就可以显示了 --&gt;</span><br></pre></td></tr></table></figure><h3 id="3-我使用的这个旧的方法来自两篇文章"><a class="markdownIt-Anchor" href="#3-我使用的这个旧的方法来自两篇文章"></a> 3. 我使用的这个旧的方法来自两篇文章</h3><p>第一篇比较正常，第二篇算是挺有趣的口吻。</p><ol><li><p>首先是简书的一篇文章。<a href="https://www.jianshu.com/p/280c6a6f2594">文章链接</a></p><ul><li>这个方法是主要markdown图片插入方法。</li></ul></li><li><p>这是一篇CSDN上的博客。 <a href="https://blog.csdn.net/Sugar_Rainbow/article/details/57415705">文章链接</a></p><ul><li><p>而这个是小佬学习大佬的笔记，挺通俗的。</p></li><li><p>这个解决了Hexo网页导入图片失败的问题。</p></li><li><p>注意文件路径真的不能有中文！</p></li></ul></li></ol><h3 id="4-然后就是正规的方法了"><a class="markdownIt-Anchor" href="#4-然后就是正规的方法了"></a> 4. 然后就是正规的方法了</h3><p><a href="https://hexo.io/zh-cn/docs/asset-folders#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%BC%95%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6">官网链接</a>的最后有提到一种一键的方式，来自开发人员的一个小工具，把<code>![芙兰朵露·斯卡蕾特](tho.gif)</code>的markdown语句转化成html中的图片插入语句（就硬转😅），github 仓库链接在这里了：<a href="https://github.com/hexojs/hexo-renderer-marked">我是链接</a></p><p>最后我使用的代码片段是：</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">芙兰朵露·斯卡蕾特</span>](<span class="link">tho.gif</span>)</span><br></pre></td></tr></table></figure><p>这里还存在一个问题，那就是<code>tho.gif</code>文件在<code>markdown_figure_practice</code>目录下（一些必须在这个目录下，因为这是当前blog的asset file），虽然的确图片最后会在html文件的相同文件夹中，的确是可以索引道德，但是这里是不符合md的语法的，所以这个硬转稍显僵硬。</p><p>更新：这个插件可以调参，有pastAsset这个参数来选择是否使用asset folder，因此是可以使用目录<code>markdown_figure_practice/tho.gif</code> 。但是我没有成功。我还是用硬转的方法吧。</p><p>如何更好的在typora中展示asset folder中的图片呢？这里有一篇<a href="https://www.dazhuanlan.com/2020/01/18/5e2327390016b/">文章</a>讲了讲。方法就是在开头插入一小段说明：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typora-root-url: [asset floder name]</span><br></pre></td></tr></table></figure><h3 id="x-重要参考资料"><a class="markdownIt-Anchor" href="#x-重要参考资料"></a> x. 重要参考资料</h3><p>小表情来源：<a href="http://emojihomepage.com/">http://emojihomepage.com/</a></p><p>硬转插件：<a href="https://github.com/hexojs/hexo-renderer-marked">https://github.com/hexojs/hexo-renderer-marked</a></p><p>官方相关教程：<a href="https://hexo.io/zh-cn/docs/asset-folders#%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%BC%95%E7%94%A8%E7%9A%84%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6">https://hexo.io/zh-cn/docs/asset-folders#相对路径引用的标签插件</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图片导入示例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#图片导入示例&quot;&gt;&lt;/a&gt; 图片导入示例&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;tho.gif&quot; alt=&quot;芙兰朵露·斯卡蕾特&quot; /&gt;&lt;/p&gt;
&lt;p&gt;东方Project-&lt;a hr</summary>
      
    
    
    
    <category term="Library" scheme="http://discover304.github.io/categories/Library/"/>
    
    <category term="ToolBook" scheme="http://discover304.github.io/categories/Library/ToolBook/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="参考" scheme="http://discover304.github.io/tags/%E5%8F%82%E8%80%83/"/>
    
    <category term="模板" scheme="http://discover304.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Markdown" scheme="http://discover304.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Distinguish Two &quot;And&quot; in Python</title>
    <link href="http://discover304.github.io/2020/09/27/9-Distinguish-and-in-python/"/>
    <id>http://discover304.github.io/2020/09/27/9-Distinguish-and-in-python/</id>
    <published>2020-09-27T01:44:30.000Z</published>
    <updated>2020-12-28T07:43:38.134Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Most important first: &amp; is a bit-wise operator while “and” is a logical connector.</strong></p><h2 id="property-of-these-two"><a class="markdownIt-Anchor" href="#property-of-these-two"></a> Property of these two</h2><p>First I need to cite a piece from the <a href="https://www.geeksforgeeks.org/difference-between-and-and-in-python/">instructor given link</a>:</p><blockquote><p>(year%4==0 &amp; 92) will be evaluated.</p><p>year%4==0 = 0</p><p>(0 &amp; 92) ==&gt; 0000000 &amp; 1011100 ==&gt; 1011100 ==&gt;92, which is a True value because it is non zero value.</p><p>Hence the result will be True.</p></blockquote><p>There are some mistake made by the author (reason has discussed in followup discussions) and a correct version would be like:</p><blockquote><p>year = 1992</p><p>Evaluate (year%4==0 &amp; 92).</p><p>Since the &amp; has higher precedence we have (year%4 == (0 &amp; 92))</p><p>(0 &amp; 92) ==&gt; 0000000 &amp; 1011100 ==&gt; 0000000 ==&gt;0, which is a False value because it is zero.</p><p>Then (year%4 == 0) gives us true.</p></blockquote><p>We can see that &amp; is a bitwise operator, strictly follow the bit string, carry “and” operation on each pair of them. Then give a result bit string.</p><p>Then what about “and”? “and” is a lazy guy (just like and in Haskell) when it encountered a false result, it will stop and give an give back that value. What does this mean? Wait, let me explain. A more mathematical notation of “and” is a logic connector we know that if there is a thing is false, the whole statement connected with “and” is false. So, “and” simply give the first false statement it encountered and say “here you are, this is the answer”. So does all statement is true, it will give the last true statement.</p><p>still use examples from <a href="https://www.geeksforgeeks.org/difference-between-and-and-in-python/">the link above</a>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">9</span>, <span class="number">10</span></span><br><span class="line">print(a &amp; b)</span><br><span class="line">print(a <span class="keyword">and</span> b)</span><br></pre></td></tr></table></figure><p>They will give 8 and 10 respectively. 8 is because of bit-wise calculation. “and” processed to the last value and simply gives 10 as result, since a and b are both none zero values which means true.</p><h2 id="then-lets-talk-about-list-operation"><a class="markdownIt-Anchor" href="#then-lets-talk-about-list-operation"></a> Then let’s talk about list operation.</h2><p>&amp; is sadly not support some kind of bit-wise calculation of a list. As the instructor said we can use some func in library Pandas instead of trying &amp;.</p><p>Then “and”. I guess a list defaults to be the true value, so no matter how many lists connect with “and” and no matter what the value those lists include, the output would be the last list. Like the example below, it always gives us List4 (ridiculously correct answer).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 <span class="keyword">and</span> list2 <span class="keyword">and</span> list3 <span class="keyword">and</span> list4</span><br></pre></td></tr></table></figure><p>There may be someplace we can use this property, but if we only care about the answer, I guess we have to try func in library Pandas.</p><p>ps: the second part has not been tested and what are those func or how to use Pandas are still unrevealed. If you find any mistake or want to add more points, feel free to edit, it will be great.</p><hr /><p>博主简介：<br />座右铭：一切都是最好的安排。2020吃冰激凌。<br />爱丁堡大学 AI 专业，一个点数都加在智商上的究极理工男，理科竞赛选手。但是热爱读书和写作，虽然写得不好但还会一直写。喜爱电音的渣渣音乐家，有点热心过头的朋友。<br />所有文章都在个人博客上：<a href="http://discover304.github.io">discover304.github.io</a><br />CSDN：discover304<br />公众号：白泽百泽（注：内容和博客是一样的）</p><hr />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Most important first: &amp;amp; is a bit-wise operator while “and” is a logical connector.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;property-of-these-two</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="GeneralNote" scheme="http://discover304.github.io/categories/NoteBook/GeneralNote/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Python" scheme="http://discover304.github.io/tags/Python/"/>
    
    <category term="知识" scheme="http://discover304.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
    <category term="对比" scheme="http://discover304.github.io/tags/%E5%AF%B9%E6%AF%94/"/>
    
    <category term="答疑" scheme="http://discover304.github.io/tags/%E7%AD%94%E7%96%91/"/>
    
    <category term="误区" scheme="http://discover304.github.io/tags/%E8%AF%AF%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>基于 Github 的博客搭建</title>
    <link href="http://discover304.github.io/2020/08/21/4-%E5%9F%BA%E4%BA%8E-Github-%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://discover304.github.io/2020/08/21/4-%E5%9F%BA%E4%BA%8E-Github-%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2020-08-21T09:37:10.000Z</published>
    <updated>2020-12-27T03:35:22.542Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章整理了我在搭建我自己的博客网站的时候用到的素材和教程。本文主要分六部分：网页导航、博客功能扩展、常用指令、博客搭建过程一览、遇到的问题、小知识点。</p><p>想要尽快开始搭建自己的博客的读者，请移步到<a href="#%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E4%B8%80%E8%A7%88">博客搭建过程一览</a>。</p><h2 id="网页导航"><a class="markdownIt-Anchor" href="#网页导航"></a> 网页导航</h2><ul><li><a href="https://discover304.github.io/">我的博客网址</a>。</li><li><a href="https://github.com/hexojs/hexo">Hexo 官方 Github 仓库</a>。</li><li><a href="https://github.com/JoeyBling/hexo-theme-yilia-plus">一个比较好的 Hexo theme</a>。</li><li><a href="https://easyhexo.com/1-Hexo-install-and-config/1-4-deploy-hexo.html#%E9%83%A8%E7%BD%B2%E5%88%B0-github">Hexo 官网的安装和部署教程</a>。</li><li><a href="https://hexo.io/zh-cn/docs/writing.html">Blog 和 Markdown 文件的预设操作，使用 Hexo 的各种功能</a>。</li></ul><h2 id="博客功能扩展"><a class="markdownIt-Anchor" href="#博客功能扩展"></a> 博客功能扩展</h2><ol><li><a href="https://github.com/EYHN/hexo-helper-live2d">添加看板娘</a>。</li><li><a href="https://www.jianshu.com/p/e17711e44e00">添加标签和分类</a>。</li></ol><h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2><ul><li><code>$ hexo init</code> 在当前文件夹初始化一个 Hexo 博客项目。</li><li><code>$ hexo new [layout] &lt;title&gt;</code> 新建一个名字是 title 的博客文档。layout 一般都是 blog。</li><li><code>$ hexo server</code> 将博客部署到本地，默认本地连接：<a href="localhost:4000/">localhost:4000/</a>。</li><li><code>$ hexo clean</code> 清除缓存，能够解决一些问题。</li><li><code>$ hexo d -g</code> 部署到 Github 上。</li></ul><h2 id="博客搭建过程一览"><a class="markdownIt-Anchor" href="#博客搭建过程一览"></a> 博客搭建过程一览</h2><ol><li>在 Github 上创建一个名为 <a href="http://name.github.io">name.github.io</a> 的仓库，name 是你的用户名。</li><li>克隆一份 <a href="http://name.github.io">name.github.io</a> 到本地作为接下来操作的目录。所有的变化都要在这个目录下完成。</li><li>了解一下 Node.js、Hexo、Markdown、Html (知道什么是超文本标记语言)。</li><li>在网上阅读安装说明后，依次安装 npm、Node.js、Hexo-cli。</li><li><code>$ hexo init</code> 初始化一个博客。</li><li>在网上寻找一个比较好看的 theme (皮肤) 按照说明放到 theme 文件夹下。</li><li>仔细阅读并修改博客主目录下的 <code>config.yml</code> 文件，修改 theme 文件夹中的 <code>_config.yml</code> 文件。调试过程中使用<code>$ hexo server</code>命令测试效果。</li><li>使用常用命令开始使用博客。</li><li>Markdown 格式的博客文件在<code>$ cd source/_posts/</code>下。</li></ol><h2 id="遇到的问题"><a class="markdownIt-Anchor" href="#遇到的问题"></a> 遇到的问题</h2><ol><li>利用 OAuth 的 Gitment 无法登录的问题解决，这个在 Github issue 里讨论了很多，是 <code>http</code> 和 <code>https</code> 的差别导致的问题。<a href="https://github.com/gitalk/gitalk/issues/162">详情见链接</a>。</li><li>Hexo Markdown 插入图片问题，这个已经研究过了，<a href="https://discover304.github.io/2020/05/21/markdown_figure_practice/">详见我的文章</a>。</li></ol><h2 id="小知识点"><a class="markdownIt-Anchor" href="#小知识点"></a> 小知识点</h2><ol><li>.ico 结尾的是图标格式的文件。</li><li>OAuth 是 Github 的一个小型服务器，免费，但是性能很差。学长有说过这是个坑，未来感兴趣可以更多的了解了解。</li><li>Hexo 的配置文件是 <code>_config.yml</code>。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章整理了我在搭建我自己的博客网站的时候用到的素材和教程。本文主要分六部分：网页导航、博客功能扩展、常用指令、博客搭建过程一览、遇到的问题、小知识点。&lt;/p&gt;
&lt;p&gt;想要尽快开始搭建自己的博客的读者，请移步到&lt;a href=&quot;#%E5%8D%9A%E5%AE%A2%E6</summary>
      
    
    
    
    <category term="Library" scheme="http://discover304.github.io/categories/Library/"/>
    
    <category term="ToolBook" scheme="http://discover304.github.io/categories/Library/ToolBook/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="参考" scheme="http://discover304.github.io/tags/%E5%8F%82%E8%80%83/"/>
    
    <category term="资料" scheme="http://discover304.github.io/tags/%E8%B5%84%E6%96%99/"/>
    
    <category term="模板" scheme="http://discover304.github.io/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Windows 微痛转 Linux: 万万没想到肯德基的网竟然这么好</title>
    <link href="http://discover304.github.io/2020/08/21/7-Windows-%E5%BE%AE%E7%97%9B%E8%BD%AC-Linux-%E4%B8%87%E4%B8%87%E6%B2%A1%E6%83%B3%E5%88%B0%E8%82%AF%E5%BE%B7%E5%9F%BA%E7%9A%84%E7%BD%91%E7%AB%9F%E7%84%B6%E8%BF%99%E4%B9%88%E5%A5%BD/"/>
    <id>http://discover304.github.io/2020/08/21/7-Windows-%E5%BE%AE%E7%97%9B%E8%BD%AC-Linux-%E4%B8%87%E4%B8%87%E6%B2%A1%E6%83%B3%E5%88%B0%E8%82%AF%E5%BE%B7%E5%9F%BA%E7%9A%84%E7%BD%91%E7%AB%9F%E7%84%B6%E8%BF%99%E4%B9%88%E5%A5%BD/</id>
    <published>2020-08-20T16:10:59.000Z</published>
    <updated>2020-12-28T12:49:32.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要-linux"><a class="markdownIt-Anchor" href="#为什么要-linux"></a> 为什么要 Linux</h2><p>Linux 的简介可以找度娘问问，就不赘述了。这里我们来说说 Linux 的特性。</p><p>首先 Linux 系统有 win 和 mac 无法比拟的可定制性，上到软件的表现，下到硬盘的划分都是可以修改的（也就是说，你可以制作属于你自己的 Linux 系统，也可以把你的系统优雅地粉碎 \手动滑稽）。其次 Linux 对与软件的管理有自己的一套，可以非常简单地安装、更新、卸载。如果习惯了使用 <code>sudo apt</code> 指令来控制软件（Linux 里习惯用 package 也就是包而不是软件来形容），你会发现你操作计算机的速度变快了。因为省去了鼠标的活动，你可以把想做的事情告诉电脑，让电脑帮你完成，而不是你自己去完成。因此，在开发人员和效率至上的人眼中，Linux 是有魔力的。</p><p><img src="linux_logo.jpeg" alt="Linux logo" /></p><p>除此之外，Linux 在学生群体中也是非常受欢迎的。Linux 的发行版系统一般是遵循 GNU 协议的，属于类 Unix 开源系统，这赋予了这个系统新的特点：底层源代码可以被随意修改。在看到 Linux 在学生手中，尤其是喜欢瞎鼓捣的学生手中的魔改版本之后，说 Linux 是一个寓教娱乐的玩具也不为过。</p><a id="more"></a><p>但相对的有好处也就有坏处，Linux 的安装属实劝退。怎么说呢，只有求知欲强的人才能装好 Linux。安装时会有很多很多从来没有听说过的计算机词汇，像是 EFI 系统分区、EXT4 分区格式、第三方非 GNU 软件协议、修改下载源和各种软件名称。每一个遇到的新词都需要用一个负责任的态度学会，弄懂这个新的东西有什么用。每一次学习都会丰富你对 Linux 的知识储备，提高你成功安装 Linux 的几率。这个过程需要耐心，需要好奇心，需要作记录的好习惯。</p><blockquote><p>注：这里的安装不是说走完系统安装引导就算OK了，需要在系统的易用性和性能上做到一定的提升，达到解放硬件潜力的目的才算成功得安装了 Linux。</p></blockquote><p>Linux 为什么仅仅只占全球系统数不到2%的原因肯定不只是我上面说的这一点。整体来看，除去少数几个比较成熟的发行版，Linux 系统的美工和易用性非常差劲，尤其是在包的依赖这个问题上面，非常容易出现打不开、卡死或者报错的情况。因此挑选一个适合自己的 Linux 发行版也是重中之重。这个过程非常耗时，每一个系统都有自己的特色，很难割舍。你甚至可能会喜欢一个系统到甘愿付出自己的时间和精力优化它，使它成为唯一。但是一般情况是你一直在作无用工，就像笔者一样，优化了半天发现某某优化方式不适合当前的系统（呜呜呜，一定不要乱搞啊）。虽然是无用工，但也是宝贵的经历，丰富了你在处理 Linux 报错时的阅历。</p><p><strong>废话少说，让我们进入正题，来聊聊我和 Linux 之间的爱恨情仇。</strong></p><h2 id="一切都是从一则假新闻开始的"><a class="markdownIt-Anchor" href="#一切都是从一则假新闻开始的"></a> 一切都是从一则假新闻开始的</h2><p>有的时候公众号上的新闻真的是有故意炒作的情况。正当美国限制抖音和微信时候，这些个媒体就开始说微软修改了那个什么什么协议，加了一条什么什么，为XXX做准备，搞得人心惶惶。我当然是不信这个，但人毕竟是群居动物（编辑加：找借口，石锤了），在这样的情景下免不得会去思考未来，为可能的最坏情况做打算。就这样笔者开始思考 Linux 作为主要开发系统的优势，开始做 Win 转 Linux 的计划了。</p><p>从一个已经使用非常熟练的系统迁移到另外起一个是非常复杂的。对于开发人员尤是如此，多样的开发环境安装，针对性的加速配置以及对变化后的开发习惯的适应等等一大堆事情。“太麻烦，做个计划吧；奥利给，干就完事了” 我当时好像是这么想的。计划就不列出来了，毕竟是个挺自由的计划，中途随着眼界变宽修改了好几次。</p><p>趁着还没有开始大篇幅的说技术的事情，我真的想吐槽一句：为什么要在我已经把我的 2004 版本的 Windows 10 Pro 卸载得干干净净时告诉我微软并没有狠下心来断绝和中国的关系啊啊啊！我也是被自己蠢笑了。要不是结局还算完满，我定要把那几个辣鸡公众号给抛出来，让大家瞅瞅。假新闻害人呀。炒作也不行！<a href="https://www.ithome.com/0/502/358.htm">辟谣</a>的文章在这里有一篇，感兴趣的可以自己搜一下。</p><p><img src="news.png" alt="辟谣图片" /></p><h2 id="我才不用-ubuntu-呢国产系统赛高"><a class="markdownIt-Anchor" href="#我才不用-ubuntu-呢国产系统赛高"></a> 我才不用 Ubuntu 呢，国产系统赛高</h2><p>怎么说呢，我是个爱国的人，虽然有的时候很幼稚，但的确是在用我的方式爱国。国产系统很早很早就已经被炒上天了，包括来自武汉的Deepin和华为的鸿蒙系统。我约摸着反正这次是因为外国的政策导致的问题，这次就用国内的吧。既然决定了国产系统，那一定要提一下 Ukylin (U麒麟) 这小家伙很有来头，背后有工信部和国防科技大学的大力支持。我在旧电脑上装过一次，感觉还行，速度比 Win XP 强那么一丢丢。这次在新电脑上装，应该也能有很不错的表现吧。很明显这是个死亡 Flag ，不出所料，Ukylin 给我整了不少事儿。</p><p><img src="youker-island.jpg" alt="Ukylin 桌面" /></p><h2 id="poor-ukylin"><a class="markdownIt-Anchor" href="#poor-ukylin"></a> Poor Ukylin</h2><p>咱先来说说 Ukylin 的出身，Ukylin 从名字就能看出他和 Ubuntu 应该是有联系的。U麒麟系统，全称Ubuntu-麒麟，属于基于 Ubuntu 开源系统的 Linux 发行版。所以说U麒麟是 Ubuntu 的小儿子也不为过。不过这一定是最烦人的小儿子，Ukylin 为了提高易用性然后降低国人的学习新系统的成本，把桌面环境改成和 Win 10 非常类似的模样。你一定会说，多好呀，这样就会有更多人用了吧。但是，改得好也行啊，你放个放个半成品出来是打算让用户做小白鼠吗 (当然咱们不排除吸引大佬参与系统的完善，毕竟是开源系统)。Linux 的操作习惯本来就和 Win 不同，把 Win 硬搬进 Linux 肯定会有很多障碍。这么说吧，混合使用终端和应用商店肯定比不上只使用应用商店或者只使用终端。</p><p>所以说因为咱们小麒麟还不够成熟，无法做到只使用应用商店的程度，这种混合的风格很容易劝退一般的 Linux (准确说是 Ubuntu) 用户。我就是被劝退的一个，我习惯了在终端直接敲指令，不太喜欢系统被弄得花里胡哨的。作为一个追求简洁的人，我下意识就去把所有的 Ukylin 自带的东西卸光了，然后结果就是，炸了。依赖关系可能被我搞乱了，很多东西都开始报错卡顿，刚开始是 Ctrl+Alt+T 这个快捷键没法用，后来连键盘都失灵了。所以经验 Get：千万不要胡乱卸载包，更不要胡乱修改系统配置好的文件，当然巨佬随意。</p><h2 id="与-budgie-系统相遇"><a class="markdownIt-Anchor" href="#与-budgie-系统相遇"></a> 与 Budgie 系统相遇</h2><p>俗话说得好，靠脸也是可以吃饭的。之前提到的小麒麟就是一种，官网和系统都非常漂亮，已经是很出色的现代美术风格了。这里提到的 Budgie 小不点也是一样，是个很漂亮的系统。Budgie 是鹦鹉的意思，这个系统的标也是只小鸟，那就叫它小鸟吧。小鸟和小麒麟可不一样，这是 Ubuntu 的亲儿子，曾被放在 Ubuntu 官网的发行版选择界面最显眼的地方。就这一点就已经很能体现 Bugie 小系统有不凡之处了。Bugie 官方说这是一个现代化的系统，包括桌面的布局，动态效果和很多贴心的官方插件。其他也没有什么值得说的了，都是些老生常谈的话，感兴趣的可以上官网瞅瞅。</p><p><img src="wallpapersden.com_manjaro-budgie-linux-minimalist_1920x1080.jpg" alt="Budgie 标" /></p><h2 id="来试试-budgie-吧"><a class="markdownIt-Anchor" href="#来试试-budgie-吧"></a> 来试试 Budgie 吧</h2><p>果断把已经被我搞混乱的 Ukylin 换成了 Budgie 以后，我真的被 Budgie 惊到了。怪不得说 Budgie 有不输苹果电脑桌面的美工。但是又不仅仅局限于美工，翻看了 Budgie 的一些配置文件，可以说 Budgie 的本质就是一个美化到了极致的 Ubuntu 系统。我约摸着修改这个系统应该不会再遇到之前的问题吧，然后把 Snap 应用商店卸掉了。没出问题 (对不起让你失望了\手动滑稽)。看来之前出问题的原因只能是 Ukylin 对 Ubuntu 进行了魔改呢。</p><p><img src="budgie_Desktop.png" alt="Budgie 桌面" /></p><h2 id="这没有-qq-啊"><a class="markdownIt-Anchor" href="#这没有-qq-啊"></a> 这没有 QQ 啊</h2><p>我是个离不了 QQ 的人，毕竟收发文件还是 QQ 好用。腾讯官方的 Linux 版 QQ 无法支持我的需求，那就是个聊天发图片的工具，于是我把目光转向了 Deepin (之前提过一次的国产系统) Wine 虚拟机版的 QQ。虽然 Linux 是个很注重包依赖关系的系统，但是因为 Deepin 也是基于 Ubuntu 的系统，和我的小 Budgie 血缘关系很近 (刚开始我是这么以为的)，我觉得他们应该可以兼容。就这样我跃跃欲试得按照网上给出的方法开始安装这个 QQ。不成想，刚做到程序安装那一步，他给我报错说包的依赖无法解决。感觉 BGM 直接起来了：小朋友你是不是有很多问号。之后我试了很多方法，包括把软件源换回官方源，添加 Deepin 的一些源，更换一些包的版本，尝试 Test 测试源。反正我把我会的方法都用了个遍，怎么说呢，这就叫黔驴技穷。后来我查了一下，发现 Deepin 很早就不是基于 Ubuntu 的了，改成了基于 Ubuntu 的老爹 Debian 系统的了。跳级了？！！怪不得 Deepin 给人的感觉都不太一样呢。GG，没戏，因为在这个阶段，QQ 在我的感觉里还是刚需，所以小 Budgie 系统也不太适合我吧。</p><h2 id="deepin-冲冲冲"><a class="markdownIt-Anchor" href="#deepin-冲冲冲"></a> Deepin 冲冲冲</h2><p>既然已经知道了 Deepin 这个系统不简单，而且安装的流程已经掌握了，那咱就试试 Deepin 系统吧。抱着这样的心情，我又阴沟里翻了船，真的不能大意啊啊啊！我习惯用 Rufus 这个软件做安装盘，没有用 Deepin 官方的安装盘制作软件，安装盘制作失败了。这系统怎么做个安装盘都这么矫情呢，之前哪个系统我需要官方的安装盘制作软件了，我做个安装盘容易吗我，干等半小时。一顿披荆斩棘过后，我终于把 Deepin 安装上了，虽然中间偷了点懒，没有设置<code>\home</code>分区，但最后的结果依然很令人满意。光是开机界面，就美哭我了，一种完全和 Ubuntu 系的系统不同的风格，可以说是深度 (deep) 定制了。之后试了一段时间，给人的感觉应该叫做妖艳，有点像小麒麟长大该有的模样。但是呢，我之前也有说到过，Linux 应用商店的模式我是着实不喜欢，所以整体的使用体验并不是很好。当然还有就是因为没有很多的社区支持和对我的英式硬件的超差支持，我最终还是放弃了漂漂亮亮的 Deepin。</p><p>最后也没有找到比较好的图片，不过大概就是这个样子。</p><p><img src="deepin_desktop.jpeg" alt="deepin desktop" /></p><h2 id="debian-archlinux-or-gentoo"><a class="markdownIt-Anchor" href="#debian-archlinux-or-gentoo"></a> debian, archlinux or gentoo</h2><p>好了，故事差不多接近尾声了，这里咱来唠唠 Linux 的家族。最有流行的当然是基于 Debian 的 Ubuntu，排行榜上也是榜首，同时也是最多人用的 Linux 系统。在服务器端最常用的是红帽系统，主打稳定性。然后登场的是在技术圈大名鼎鼎的 archlinux 和 gentoo (这里排名不分先后) ，两个滚动更新的大佬级别系统。这里的大佬有两层意思，第一层就是系统本身非常强大，第二层就是不是大佬玩不转这些系统。archlinux 的包管理要比 Debian 的<code>apt</code>包管理自由一些，装啥都能装上，还能给你把系统装废了，具体的我也不说了，我接触的也不多。如果说 archlinux 追求的是可定制性，那么 gentoo 追求的就是极致的性能了。注意是极致的性能，换言之，如果你知道你的系统以后要做什么事情，你可以从 gentoo 的最最底层开始进行针对性的配置优化。因此，gentoo 这个系统可以做任何事情。</p><p><img src="gentoo-abducted-1152x864.png" alt="gentoo desktop" /></p><h2 id="gentoo-系统从入门到放弃"><a class="markdownIt-Anchor" href="#gentoo-系统从入门到放弃"></a> gentoo 系统从入门到放弃</h2><p>我不是大佬，我还在成为大佬的路上，gentoo 系统就很好的让我认清了这个现实。我第一次装 gentoo 还是几个月前在一台04年的老电脑上，最后的结果就是装了4次，全部失败了。老话说得好，你学会了某个系统，就用那个系统吧，但如果你学会了 gentoo 你就学会了 Linux 的全部。gentoo 的安装真的不是跟着官方说明 (Wiki) 一步步走就能成功的。gentoo 的哲学是选择，安装的每一步都是在选择，错一步就会跌入深渊 (不排除笔者还很菜，才疏学浅，应对不了 gentoo 的安装工作)。在新电脑上安装 gentoo 就停留在了进入安装盘这一步，因为我发现，在旧电脑那个 x86 内核上安装系统的方法和我的新电脑完全不同，之前的经验几乎没有用了。放弃，果断放弃，虽然 gentoo 的极致性能真的很吸引人，但是我这个电脑还要用呢，实在没那个空钻研 gentoo。未来有机会再说吧，逃走。</p><h2 id="出来吧-budgie-就决定是你了"><a class="markdownIt-Anchor" href="#出来吧-budgie-就决定是你了"></a> 出来吧 budgie， 就决定是你了</h2><p>最后我决定 budgie 了，虽然没有 QQ，但是我可以慢慢适应用蓝牙和云盘这类东西来替代嘛，完美。接下来就是系统的优化环节。说是优化其实也没有几步，就是改改配置的事儿。不过最扎心的是那第一步，系统更新时带来的网速问题。要说中国的 Ubuntu 用户最糟心的是什么，那一定是网速，详细一点就是官方源在国外，国内的的速度慢得要死。如果仅仅是把官方源改成国内镜像站这么简单的事情，我也不会拿出来讲，关键是我这个 budgie 吧，它用的人太少了，很多系统相关的包在国内镜像站找不到，更别谈升级了。那我也只能是退一步，先用官方源升级系统，然后再转回国内源喽。</p><h2 id="ohhhhhhhhh-主人公出场"><a class="markdownIt-Anchor" href="#ohhhhhhhhh-主人公出场"></a> Ohhhhhhhhh, 主人公出场</h2><p>计划很简单，实施起来着实糟心，真实体验了一下什么叫做慢。远远不到 1Kb 的速度，下个东西下一晚上。行吧，你慢就慢吧，能下完也行啊，但问题是他这，中途还会断线，需要人工重连。我整个人都不好了，虽然我写了一个脚本可以免去人工重连里这人工两个字，但也是感觉很烦，可能焦虑更合适。就在我一筹莫展得在 KFC 吃炸鸡的时候，救世主出现了，KFC-Free-Net 在我最困难的时候给我送来了 100Kb 每秒的网络。虽然你说这速度也不快，但是在体验了真正的蜗牛网速之后的我的感觉里，这 100Kb 真的太给力了，可能是久旱逢甘露的感觉。我之后又来了 KFC 一趟，安装另一个只有官方源才有的包，再次证明我的发现是正确的，Ubuntu 的官方源用我家旁边的 KFC 的网会快很多。现在回想起来真的有一种莫名的喜感。</p><p><img src="KFC_girl.jpg" alt="KFC Ohhhh" /></p><h2 id="结束语"><a class="markdownIt-Anchor" href="#结束语"></a> 结束语</h2><p>为什么肯德基的网会比家里的好那么一丢丢呢，说真的，我也不是很清楚，是因为比较稳定？为什么我会遇到这样戏剧性的事情呢？这可能是神的领域，交给命运解释去吧。不管怎么说，结局是圆满的，我现在的 Budgie 系统作为主力开发本而言非常给力，而且有一种不经历风雨怎么会见到彩虹的实感。看到这里，读者可能会想去试试 Linux，也可能会觉得枯燥无味继续使用 Win 或者 Mac ，但是在文章的结尾我还是想说一句：系统就是个系统，没有必要去为了什么幼稚的目的像我一样去改系统，从一个已经用得非常熟练的系统迁移到 Linux 是很不划算的。最后的最后废话一句，2020吃冰激凌，在这不太平的一年做些不简单的事儿。</p><h2 id="我们来看看-linux-的家谱"><a class="markdownIt-Anchor" href="#我们来看看-linux-的家谱"></a> 我们来看看 Linux 的家谱</h2><p><img src="linuxDistribution.jpeg" alt="Linux 家谱" /></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么要-linux&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#为什么要-linux&quot;&gt;&lt;/a&gt; 为什么要 Linux&lt;/h2&gt;
&lt;p&gt;Linux 的简介可以找度娘问问，就不赘述了。这里我们来说说 Linux 的特性。&lt;/p&gt;
&lt;p&gt;首先 Linux 系统有 win 和 mac 无法比拟的可定制性，上到软件的表现，下到硬盘的划分都是可以修改的（也就是说，你可以制作属于你自己的 Linux 系统，也可以把你的系统优雅地粉碎 \手动滑稽）。其次 Linux 对与软件的管理有自己的一套，可以非常简单地安装、更新、卸载。如果习惯了使用 &lt;code&gt;sudo apt&lt;/code&gt; 指令来控制软件（Linux 里习惯用 package 也就是包而不是软件来形容），你会发现你操作计算机的速度变快了。因为省去了鼠标的活动，你可以把想做的事情告诉电脑，让电脑帮你完成，而不是你自己去完成。因此，在开发人员和效率至上的人眼中，Linux 是有魔力的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;linux_logo.jpeg&quot; alt=&quot;Linux logo&quot; /&gt;&lt;/p&gt;
&lt;p&gt;除此之外，Linux 在学生群体中也是非常受欢迎的。Linux 的发行版系统一般是遵循 GNU 协议的，属于类 Unix 开源系统，这赋予了这个系统新的特点：底层源代码可以被随意修改。在看到 Linux 在学生手中，尤其是喜欢瞎鼓捣的学生手中的魔改版本之后，说 Linux 是一个寓教娱乐的玩具也不为过。&lt;/p&gt;</summary>
    
    
    
    <category term="DailyLife" scheme="http://discover304.github.io/categories/DailyLife/"/>
    
    <category term="Normal" scheme="http://discover304.github.io/categories/DailyLife/Normal/"/>
    
    
    <category term="经历" scheme="http://discover304.github.io/tags/%E7%BB%8F%E5%8E%86/"/>
    
    <category term="记录" scheme="http://discover304.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Linux" scheme="http://discover304.github.io/tags/Linux/"/>
    
    <category term="系统" scheme="http://discover304.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>《基于Python的大数据分析基础及实战》精简读书笔记</title>
    <link href="http://discover304.github.io/2020/08/08/8-%E3%80%8A%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%AE%9E%E6%88%98%E3%80%8B%E7%B2%BE%E7%AE%80%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://discover304.github.io/2020/08/08/8-%E3%80%8A%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%AE%9E%E6%88%98%E3%80%8B%E7%B2%BE%E7%AE%80%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-08T13:04:16.000Z</published>
    <updated>2020-12-28T07:43:47.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> INTRODUCTION</h2><p>这是一本写给初学者的数据分析和Python使用教程，比较通俗易懂，但是在关键知识点的解释上不尽如人意，是本入门级的书。</p><!-- give a short summary of the content of the book --><h2 id="list-of-key-points"><a class="markdownIt-Anchor" href="#list-of-key-points"></a> LIST OF KEY POINTS</h2><h3 id="python基础部分"><a class="markdownIt-Anchor" href="#python基础部分"></a> Python基础部分</h3><ol><li>定义：<strong>带键值参数传递</strong>，变量的类型为键值对，但又与一般的字典类型的定义不同。举例为：函数定义：func(**[variable]) ；使用：func(aa=11,bb=22,cc=33) 此处的长度可随意。</li><li>定义：<strong>回调函数</strong>，传递变量给一个函数的方法。可以理解为一种更加自由的命名方式，方便使用。相关术语：回调函数、登记回调函数、出发回调关联事项、调用回调函数、响应回调事件。</li><li>关键点：递归的过程中，iterator（及 yield 关键词）的使用能够<em>极大的减小内存使用</em>。原理：yield 关键词把一个函数转变成了generator，函数返回itarable对象。</li><li>相似点：Haskell 中的 foldl 和 Python 的 reduce 函数及其相似，使用方法也是大同小异。（其他相似的还有 map 和 filter 函数）</li><li>定义：<strong>私有变量</strong>和<strong>私有方法</strong>也就是 java 中添加了 private 修饰词的方法。Python 中使用 双下划线的方式定义。举例：__func。</li><li>知识点：Python 的注释是纯文本形式，及 ‘‘XXX’’ 的形式进行注释文档注释也是这种格式，但使用 ‘’‘XXX’’’ （三个单引号）且换行的形式。</li><li>辅助知识：help([package/function]) 显示指定模块或函数的帮助文档。dir([package])查看指定模块中的所有成员或指定对象类型所支持的操作类型。ord(’[a]’) 查询ASCII码。</li><li>注意事项：Python 使用全小写加下划线的驼峰命名方式。只有类名首字母大写。</li><li>补充知识：单一下划线开头的是特殊变量或函数，不能使用 from [module] import * 导入。推测是因为会和标准库或第三方库冲突。举例：_func。</li><li>补充：可以发布第三方库到PyPi。</li></ol><h3 id="数据处理部分"><a class="markdownIt-Anchor" href="#数据处理部分"></a> 数据处理部分</h3><ol><li>使用贴士：Numpy Series 可以存放<em>多种数据类型</em>，算是 <em>List 对象的升级版</em>，同时 Index 可以自定义，默认索引从0开始。Series 不可以追加元素，但可以追加序列。举例：aas = Series([X, X, X], index=[X, X, X])</li><li>使用贴士：<em>Pandas DataFrame 是 Numpy Series 的容器</em>，也就是对于一维的 Series 进行组合，得到高纬度的数据框格式。举例：df = DataFrame({“COLUMN_INDEX”:aas}) （aas是一个Numpy Series，“{}”属于字典，可以无限拉长。）综上所述，<em>DataFrame 本质上是一种高级的字典</em>。</li><li>使用贴士：所有的读取操作，一个 read 解决。</li><li>意义：数据处理能够提高数据的质量，另一方面能让数据更好的适应特定的数据分析工具。</li><li>定义：<strong>数据清洗</strong>，字面义就是对坏数据进行处理。坏数据包括：不完整的、不一致的、有异常的。方法：重复值处理、缺失值处理、垃圾数据清理、无关数据处理、平滑噪声数据。<ul><li>经典语句：一个分析项目80%的工作量都是在清洗数据。</li></ul></li><li>定义：<strong>数据抽取</strong>，从当前数据集中抽取片段。方法很多，属于筛选的操作，可以有的方法如：随机抽样、按顺序抽取、条件抽取。<ul><li>注意：数据抽取是<em>存在副作用</em>的，可能需要重新设置索引。</li><li>小贴士：DataFrame 同时抽取几条数据时一定要使用列表索引，而不能简单的用逗号分隔。举例：【错误】df[1, 2] 【修正】df[[1, 2]] (解释：取数据表 index 等于1和2的数据，返回一个新的数据集)</li><li>定义：插入记录，在某一位置上插入一行数据。Pandas 中没有定义相关函数，需要根据实际情况自行构建。</li><li>定义：修改记录，顾名思义就是修改一些数据，可行的方式包括：整体替换、个别修改、</li><li>定义：交换行或列，不做解释。</li><li>定义：数据合并，不做解释。</li></ul></li><li>定义：<strong>数据计算</strong>，就是对数据进行处理，得到更多得数据。<ul><li>定义：<strong>数据标准化</strong> (归一化)：不同的数据拥有不同的量纲和量纲单位，会影响到数据分析的结果。为消除指标之间的量纲影响，原始数据在经过标准化后，各指标处于同一量级，变得适合进行综合对比评价。数据标准化的方法包括：离差标准化 (min-max normalization)、Z-score 标准化、</li><li>解释：<strong>离差标准化</strong>：对原始数据的线性转化，公式为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>X</mi><mi mathvariant="normal">∗</mi></msup><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">−</mi><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant="normal">−</mi><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X^∗=(x−min)/(max−min)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">−</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mord">−</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li><li>解释：<strong>Z-score 标准化</strong>：适用于未知最大值和最小值的情况，或存在超出取值范围的离群值的情况，公式为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>X</mi><mi mathvariant="normal">∗</mi></msup><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">−</mi><mi>μ</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>σ</mi></mrow><annotation encoding="application/x-tex">X^∗=(x−\mu)/\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">−</span><span class="mord mathdefault">μ</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span> 。也就是正态分布。</li><li>定义：<strong>数据降维</strong>：和无关数据不同，数据降维归类为数据计算，因为数据降维针对的是相关数据，目的是为了方便计算和展示。</li><li>扩展：<strong>MDS降维</strong>：多维尺度 (Multidimensional Scaling) 原则是在降维的同时尽可能的保留样本间的相对距离。具体实现方法本书没有展开讲解，这里也不做介绍了。</li><li>扩展：<strong>PCA 降维</strong>：主成分分析 (Principal Component n) 把高维线性相关的变量合成线性无关的低维变量。使用了线代中的高维投影到低维的方法。</li></ul></li><li>定义：<strong>数据分组</strong>，也就是数据分类，对于类似的数据组寻找特征。</li></ol><h3 id="数据分析"><a class="markdownIt-Anchor" href="#数据分析"></a> 数据分析</h3><ol><li>定义：<strong>数据分析</strong>：把数据的特征和内在结构展现出来的过程。包括：基本统计分析、分组分析、分布分析、交叉分析、结构分析、相关分析、聚类分析 (Cluster analysis)。</li><li>解释：<strong>分布分析</strong>：将定量数据进行等距或不等距的分组，研究各组分布规律的一种分析方法。</li><li>解释：<strong>交叉分析</strong>：固定某一变量，对其他个变量进行比较的分析方式。</li><li>解释：<strong>结构分析</strong>：在分组分析和交叉分析的基础上很多时候是看一个组数据在某一个维度的占比或者重要性。</li><li>解释：<strong>相关分析</strong>：分析两个维度之间是否线性相关，最直观的方式是直接画散点图。线性回归 (Linear Regression) 就是进行相关分析的一种方法。</li><li>解释：<strong>聚类分析</strong>：在没有给定划分类别的情况下，根据数据的相似程度进行分组的一种方法，分组的原则是组内距离最小化，组间距离最大化。换种说法就同一个子集中的成员拥有相似的一些属性，可以算作是一种非监督式学习。<ul><li>补充：<strong>K-means 算法</strong>：典型的基于距离的非层次聚类算法，在最小化误差函数的基础上将数据划分为预定的 K 类别。相关词：随机、聚类质心、分配</li><li>补充：<strong>TF-IDF 聚类分析</strong>：词频逆文档频率 (Term Frequency-Inverse Document Frequency) 及一个词在一篇文章中的频率很高，但在其他文章中相对较低，则认为此词具有很好的分类区分能力，适合用来分类。TF-IDF 可以反映出语料库中的谋篇文档中某个词对这篇文档的重要性。</li><li>补充：<strong>HC 聚类</strong>：层次聚类 (Hierarchical Clustering) 可以理解为重复使用 K-means 算法构建聚类树。</li><li>注：<em>聚类分析可以结合相关分析</em>，采用线性回归的聚类方式 (可能可以对各维度聚类)。</li></ul></li></ol><h3 id="数据可视化"><a class="markdownIt-Anchor" href="#数据可视化"></a> 数据可视化</h3><ol><li>定义：<strong>数据可视化</strong>：借助图形化的手段，清晰有效的传达与沟通信息。数据可视化的形式多种多样，这里不做更多阐述。</li><li>小贴士：Jupyter Notebook 支持 Markdown 和 Latex。</li><li>小贴士：为更好地使用Jupyter Notebook展示图像，我们可以添加以下代码：%matplotlib inline</li><li>小贴士：为提高图像的分辨率，我们可以添加：%config InlineBackend.figure_format=‘retina’</li><li>注意：<em>OpenCV 类库使用 BGR 颜色通道</em>，而不是常说的 RGB 颜色通道，读取时要反过来。</li><li>补充：<strong>t-SEN 高维数据可视化</strong>：一种非线性降维算法，适用于高维数据降到二维或者三维，并进行可视化。感兴趣可以在之后研究一下。</li></ol><h3 id="网络爬虫技术"><a class="markdownIt-Anchor" href="#网络爬虫技术"></a> 网络爬虫技术</h3><ol><li>小贴士：Python 中有一个可以避免转义字符的写法就是以“r”开头。举例：【一般形式】str = ‘nihaoya\-001’ 【r 前缀形式】str = ‘nihaoya-001’ (可以发现这里的反斜杠少了一个，不需要进行转意操作)</li><li>小贴士：对于需要大量使用的正则表达式，为了提高速度，我们可以提前对正则表达式进行编译，方便之后使用。代码：re.compile(r’[regex]’) (结合上一个小贴士，我们这里添加了 r 前缀)</li><li>注：正则表达式每次使用时都需要有两步，编译+匹配，把编译的过程单独拿了出来，肯定会加快了运行速度，时间变量的系数减少了。</li><li>知识点：中国的编码：gb2312 --&gt; gb18030 --&gt; gbk，支持的字符逐渐变多，从7000多个到现在将近3万多个</li><li>知识点：文本读取：二进制文件读取是不能直接读，要注明<em>使用二进制方法读取</em>。代码：file = open(r’[PATH]’, ‘rb’); file.read; (这里的 ‘rb’ 就是注明二进制读取的参数，没有的话默认Unicode)</li><li>注意：<em>Scrapy的依赖库安装顺序不能变化</em>，可能会报错。顺序为：VC++10.0 --&gt; pywin32 --&gt; Twisted --&gt; lxml --&gt; Scrapy</li></ol><h3 id="python-常用包整理"><a class="markdownIt-Anchor" href="#python-常用包整理"></a> Python 常用包整理</h3><ol><li>网络爬虫：scrapy (<em>这是个框架</em>)、bs4 (beautifulsoup4)</li><li>数学计算：numpy</li><li>数据处理：pandas</li><li>数据可视化：matplotlib</li><li>构建网络图：networkx</li><li>交互地图：folium</li><li>图像处理：PIL、pillow</li><li>计算机视觉问题：OpenCV</li><li>文本匹配 (正则表达式)：re</li><li>中文分词：jieba</li><li>自然语言处理：NLTK (Natural Language Toolkit)</li><li>词云生成：wordcloud</li><li>网页打开：urllib</li><li>编码方式判断：chardet</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;introduction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#introduction&quot;&gt;&lt;/a&gt; INTRODUCTION&lt;/h2&gt;
&lt;p&gt;这是一本写给初学者的数据分析和Python使用教程，比较通俗易懂，但是在关键知识点的</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="ReadingNote" scheme="http://discover304.github.io/categories/NoteBook/ReadingNote/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="读书" scheme="http://discover304.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
    <category term="新方法" scheme="http://discover304.github.io/tags/%E6%96%B0%E6%96%B9%E6%B3%95/"/>
    
    <category term="Python" scheme="http://discover304.github.io/tags/Python/"/>
    
    <category term="数据分析" scheme="http://discover304.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="入门" scheme="http://discover304.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>自动化-爬取公主连结Re：Dive官方动态</title>
    <link href="http://discover304.github.io/2020/07/19/6-%E8%87%AA%E5%8A%A8%E5%8C%96-%E7%88%AC%E5%8F%96%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re%EF%BC%9ADive%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    <id>http://discover304.github.io/2020/07/19/6-%E8%87%AA%E5%8A%A8%E5%8C%96-%E7%88%AC%E5%8F%96%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re%EF%BC%9ADive%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/</id>
    <published>2020-07-19T09:54:17.000Z</published>
    <updated>2020-12-27T03:49:12.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫自动化20200719"><a class="markdownIt-Anchor" href="#爬虫自动化20200719"></a> 爬虫自动化20200719</h2><p>自动爬虫使用了spring boot的<strong>Quartz定时任务</strong>方法。</p><p>本文学习借鉴了<a href="https://blog.csdn.net/gnail_oug/article/details/80825302">这篇博客</a>，感谢 gnail_oug。</p><h3 id="添加quartz依赖"><a class="markdownIt-Anchor" href="#添加quartz依赖"></a> 添加quartz依赖</h3><p>在pom.xml的dependencies下添加一个quartz依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- quartz --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编辑需要自动化的类"><a class="markdownIt-Anchor" href="#编辑需要自动化的类"></a> 编辑需要自动化的类</h3><ol><li>导入quartz包</li><li>extends QuartzJobBean。</li><li>override executeInternal method</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package XXXXX.XXXX.XXX;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">      <span class="comment">//todo your code</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置定时任务"><a class="markdownIt-Anchor" href="#配置定时任务"></a> 配置定时任务</h3><ol><li>创建config文件</li><li>标记 @Configuration</li><li>创建一个返回JobDetail类的方法</li><li>创建一个返回Triger类的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package XXXX.XXX.XX;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bot.afvsr.services.impl.NewsServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">saveNews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(NewsServiceImpl.class).withIdentity(<span class="string">&quot;saveJsonData&quot;</span>).storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">saveNewsTrigger1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//10分钟执行一次</span></span><br><span class="line">        SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                .withIntervalInMinutes(<span class="number">10</span>)</span><br><span class="line">                .repeatForever();</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(saveNews())</span><br><span class="line">                .withIdentity(<span class="string">&quot;saveJsonData&quot;</span>)</span><br><span class="line">                .withSchedule(scheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小总结"><a class="markdownIt-Anchor" href="#小总结"></a> 小总结</h3><p>这里只有方法，没有解释，停留在知其然不知其所以然的层面上，未来<strong>有机会再深究其内部运行机制</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;爬虫自动化20200719&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#爬虫自动化20200719&quot;&gt;&lt;/a&gt; 爬虫自动化20200719&lt;/h2&gt;
&lt;p&gt;自动爬虫使用了spring boot的&lt;strong&gt;Quartz定时任务&lt;/</summary>
      
    
    
    
    <category term="Project" scheme="http://discover304.github.io/categories/Project/"/>
    
    <category term="Collaboration" scheme="http://discover304.github.io/categories/Project/Collaboration/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="经历" scheme="http://discover304.github.io/tags/%E7%BB%8F%E5%8E%86/"/>
    
    <category term="记录" scheme="http://discover304.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Java" scheme="http://discover304.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>爬取公主连结Re：Dive官方动态</title>
    <link href="http://discover304.github.io/2020/07/05/5-%E7%88%AC%E5%8F%96%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re%EF%BC%9ADive%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/"/>
    <id>http://discover304.github.io/2020/07/05/5-%E7%88%AC%E5%8F%96%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re%EF%BC%9ADive%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/</id>
    <published>2020-07-05T06:14:45.000Z</published>
    <updated>2020-12-27T03:47:22.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="公主连结-redive-qq-bot-项目概述"><a class="markdownIt-Anchor" href="#公主连结-redive-qq-bot-项目概述"></a> 公主连结 Re:dive QQ bot 项目概述</h2><p>游戏资讯QQbot，涉及到了很多关于爬虫，接口，Json，SQL数据库，Java Spring，Maven，GitLab的使用和小知识点。</p><h2 id="零散的知识"><a class="markdownIt-Anchor" href="#零散的知识"></a> 零散的知识</h2><ol><li><p>git MERGING 状态解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard head</span><br><span class="line"># 回退到上一步</span><br></pre></td></tr></table></figure></li><li><p>.msi是二进制安装文件</p></li><li><p>日志文件重定向，spring的配置文件</p></li><li><p>.xml或.yml这类文件是配置文件，也就是可以被编程语言识别的东西</p><a id="more"></a></li><li><p>git的两种clone方式：</p><ul><li>HTTP</li><li>SSH</li></ul></li><li><p>前端调用controller。然后controller处理请求。再调用service处理业务逻辑。</p><ul><li>现在基本上所有的互联网公司。都是这么个结构（贫血模型）。</li><li>前后端分离。前端发出请求。</li><li>前端的请求到controller中。</li><li>由controller处理请求并响应。</li><li>由service处理业务。</li><li>由dao进行数据交互进行分层开发。</li></ul></li><li><p>相较于VS Code，typora更加简洁，就图片插入和一些markdown设定而言更加快捷。</p></li><li><p>在WWW上每一条信息都有唯一网络地址，这就是URL</p></li></ol><h2 id="gitlab-详细信息"><a class="markdownIt-Anchor" href="#gitlab-详细信息"></a> Gitlab 详细信息</h2><p>git私有仓库，采用apache协议，优质开源，且具有较高的保密性。</p><table><thead><tr><th>URL</th><th>account</th><th>password</th></tr></thead><tbody><tr><td><a href="http://***.***.**.***:****/">http://***.***.**.***:****/</a></td><td><a href="mailto:XXXXXXXX@XXX.com">XXXXXXXX@XXX.com</a></td><td>XXXXXXX</td></tr></tbody></table><h2 id="git忽略文件"><a class="markdownIt-Anchor" href="#git忽略文件"></a> Git忽略文件</h2><ol><li><p>git忽略文件的两种方法：一种是完全不，一种是停止更新。</p><ul><li>.gitignore</li><li>敲指令消除更新</li><li>来源：<a href="https://www.cnblogs.com/sutrahsing/p/11752092.html">Git忽略文章链接</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 标记文件，该文件后续的变化都不会更新到index tree</span><br><span class="line">git update-index --assume-unchanged [filename]</span><br><span class="line"></span><br><span class="line"># 恢复对文件的版本控制</span><br><span class="line">git update-index --no-assume-unchanged [filename]</span><br></pre></td></tr></table></figure></li><li><p>gitignore的注意点一定不要忘记，在新加入了不想提交的内容时一定要清缓存</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 最后的一个“.”不要忘了</span><br><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure></li><li><p>gitignore是把双刃剑，尤其是在切分支的时候，一定要把gitignore里没有被track的文件备份一份</p></li></ol><h2 id="链接mysql"><a class="markdownIt-Anchor" href="#链接mysql"></a> 链接MySQL</h2><ol><li><p>“dbc:mysql:” 需要服务器地址 + 库名 + 用户名 + 密码 + tomcat/http接口的端口</p><ul><li>地址：&lt;<a href="http://XXXXXXXXXXXXXXXXXXX.com">XXXXXXXXXXXXXXXXXXX.com</a>&gt;</li><li>当然具体的语法还是需要更加深入的学习和记忆。</li></ul><table><thead><tr><th>库名</th><th>用户名</th><th>密码</th><th>port</th></tr></thead><tbody><tr><td>name</td><td>userName</td><td>password</td><td>4-digit port</td></tr></tbody></table></li><li><p>直接连结数据库的时候使用的是数据库端口</p><ul><li>对于MySQL，默认端口port为：3306</li></ul></li></ol><h2 id="动态爬虫"><a class="markdownIt-Anchor" href="#动态爬虫"></a> 动态爬虫</h2><p>对象网页：<br />爬取网页：<a href="https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/space_history?host_uid=353840826">https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/space_history?host_uid=353840826</a></p><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><p>就是一般的思路，没有特殊的地方</p><ol><li>获取网页HTML</li><li>通过formatFilter筛出需要的信息</li><li>整理成单一String格式</li><li>输出动态信息</li></ol><h3 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h3><ol><li>获取网页HTML/Json<ul><li><p>使用HttpURLConnection类库</p><ul><li><a href="https://blog.csdn.net/sinat_25295611/article/details/62053511">JavaHttp文章链接</a></li></ul></li><li><p>URL.getcontent 方法返回的是URL的信息，不是对应网站的内容</p></li></ul></li></ol><ul><li><p>java API一定要看好哪些是abstract，哪些是可以用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最短解决方法</span></span><br><span class="line">String pageContent = IOUtils.toString(URI.create(<span class="string">&quot;[urlAddress]&quot;</span>));</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>筛出需要的信息</p><ul><li><p>Jackson 包的使用更加简介高效，替代JsonParser（JsonObject 包）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   JsonNode node = objectMapper.readValue(pageContent, JsonNode.class);</span><br><span class="line">   <span class="comment">//就使用get get get 就行</span></span><br><span class="line">   JsonNode brandNode = node.get(<span class="string">&quot;data&quot;</span>).get(<span class="string">&quot;cards&quot;</span>).get(<span class="number">0</span>).get(<span class="string">&quot;card&quot;</span>);</span><br><span class="line">   String theCard = brandNode.asText();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">   e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个用正则表达式实现内容提取</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置正则表达式</span></span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">&quot;description.*category&quot;</span>);</span><br><span class="line">Matcher dataMatcher = pattern.matcher(bilibiliCardContent);</span><br><span class="line"><span class="comment">//一定要有dataMatcher.find()这一步，可以使用while来不停的截取</span></span><br><span class="line"><span class="keyword">if</span> (dataMatcher.find()) &#123;</span><br><span class="line">   messageTemp = dataMatcher.group();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   messageTemp = <span class="string">&quot;没有哦&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> messageLength = messageTemp.length();</span><br><span class="line"><span class="comment">//截取真正的内容（因为有pattern的问题）</span></span><br><span class="line">BilibiliCardUnicodeContent = messageTemp.substring(<span class="number">14</span>, messageLength - <span class="number">11</span>);</span><br></pre></td></tr></table></figure></li><li><p>JsonParser 已经被标注@deprecated</p></li><li><p>JaonParser 直接调用静态的方法就OK</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建jsonObject对象</span></span><br><span class="line">String pageContent = <span class="string">&quot;XXXXXXX&quot;</span></span><br><span class="line">JsonObject json = (JsonObject) JsonParser.parseString(pageContent);  </span><br></pre></td></tr></table></figure></li></ul></li><li><p>整理成单一String格式</p><ul><li><p>Unicode（16进制）文本转换</p><ul><li><p><a href="https://blog.csdn.net/jodenhe/article/details/77343197">Unicode2String文章链接</a></p></li><li><p>使用到的知识：</p><table><thead><tr><th>Pattern（视情况而定）</th><th>Integer</th></tr></thead><tbody><tr><td>\\u[a-f0-9A-F]{1,4}</td><td>parseInt(String hexCode, 16)</td></tr></tbody></table></li></ul></li><li><p>replaceAll(regex,string) 返回一个修改后的string，而不是在原来的文本上修改</p></li><li><p>明文换行符就是显示：\n</p></li></ul></li><li><p>输出动态信息</p></li></ol><h2 id="项目中的图片记录"><a class="markdownIt-Anchor" href="#项目中的图片记录"></a> 项目中的图片记录</h2><p><img src="%E7%88%AC%E5%8F%96%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93Re%EF%BC%9ADive%E5%AE%98%E6%96%B9%E5%8A%A8%E6%80%81/%E7%A5%9E%E5%A5%87%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81.png" alt="神奇的验证码" /><br />彩蛋：神奇的验证码</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;公主连结-redive-qq-bot-项目概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#公主连结-redive-qq-bot-项目概述&quot;&gt;&lt;/a&gt; 公主连结 Re:dive QQ bot 项目概述&lt;/h2&gt;
&lt;p&gt;游戏资讯QQbot，涉及到了很多关于爬虫，接口，Json，SQL数据库，Java Spring，Maven，GitLab的使用和小知识点。&lt;/p&gt;
&lt;h2 id=&quot;零散的知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#零散的知识&quot;&gt;&lt;/a&gt; 零散的知识&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;git MERGING 状态解决&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 回退到上一步&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.msi是二进制安装文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日志文件重定向，spring的配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.xml或.yml这类文件是配置文件，也就是可以被编程语言识别的东西&lt;/p&gt;</summary>
    
    
    
    <category term="Project" scheme="http://discover304.github.io/categories/Project/"/>
    
    <category term="Collaboration" scheme="http://discover304.github.io/categories/Project/Collaboration/"/>
    
    
    <category term="技术" scheme="http://discover304.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="经历" scheme="http://discover304.github.io/tags/%E7%BB%8F%E5%8E%86/"/>
    
    <category term="记录" scheme="http://discover304.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Java" scheme="http://discover304.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>这是我的第一篇文章</title>
    <link href="http://discover304.github.io/2020/05/21/2-this_is_my_first_blog/"/>
    <id>http://discover304.github.io/2020/05/21/2-this_is_my_first_blog/</id>
    <published>2020-05-20T20:12:17.000Z</published>
    <updated>2020-12-27T03:38:20.637Z</updated>
    
    <content type="html"><![CDATA[<ol><li>没有什么好说的，很有趣呢。</li><li>希望未来风调码顺！</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;没有什么好说的，很有趣呢。&lt;/li&gt;
&lt;li&gt;希望未来风调码顺！&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="DailyLife" scheme="http://discover304.github.io/categories/DailyLife/"/>
    
    <category term="Normal" scheme="http://discover304.github.io/categories/DailyLife/Normal/"/>
    
    
    <category term="纪念" scheme="http://discover304.github.io/tags/%E7%BA%AA%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>Hello World in the Word of Static Web Page!!!</title>
    <link href="http://discover304.github.io/2020/05/20/1-hello_world/"/>
    <id>http://discover304.github.io/2020/05/20/1-hello_world/</id>
    <published>2020-05-20T14:00:00.000Z</published>
    <updated>2020-05-21T08:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#quick-start&quot;&gt;&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&quot;create-a-new-post&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#create-a-new-post&quot;&gt;&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;run-server&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#run-server&quot;&gt;&lt;/a&gt; Run server&lt;/h3&gt;</summary>
    
    
    
    <category term="DailyLife" scheme="http://discover304.github.io/categories/DailyLife/"/>
    
    <category term="Normal" scheme="http://discover304.github.io/categories/DailyLife/Normal/"/>
    
    
    <category term="纪念" scheme="http://discover304.github.io/tags/%E7%BA%AA%E5%BF%B5/"/>
    
  </entry>
  
</feed>
