<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haobo&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/ab3d855fe5c65deed5c8f765972aac7c</icon>
  
  <link href="http://discover304.github.io/atom.xml" rel="self"/>
  
  <link href="http://discover304.github.io/"/>
  <updated>2021-03-15T08:53:25.386Z</updated>
  <id>http://discover304.github.io/</id>
  
  <author>
    <name>Discover304</name>
    <email>hobart.yang@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RA Lecture Note: </title>
    <link href="http://discover304.github.io/2021/03/15/30-2-RA-Note/"/>
    <id>http://discover304.github.io/2021/03/15/30-2-RA-Note/</id>
    <published>2021-03-15T08:55:00.000Z</published>
    <updated>2021-03-15T08:53:25.386Z</updated>
    
    <content type="html"><![CDATA[<p>full joint probability distribution</p><p>bayesian network</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;full joint probability distribution&lt;/p&gt;
&lt;p&gt;bayesian network&lt;/p&gt;
</summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Reasoning and Agent" scheme="http://discover304.github.io/categories/University/LectureNote/Reasoning-and-Agent/"/>
    
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="http://discover304.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="人工智能" scheme="http://discover304.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Week 5 Concepts and Categories</title>
    <link href="http://discover304.github.io/2021/03/09/28-2-CG-Lecture-note/"/>
    <id>http://discover304.github.io/2021/03/09/28-2-CG-Lecture-note/</id>
    <published>2021-03-09T09:21:00.000Z</published>
    <updated>2021-03-10T02:37:50.750Z</updated>
    
    <content type="html"><![CDATA[<p><strong>concepts</strong> as mental representations of classes objects or events. They determine how things are <strong>related</strong> or <strong>categorized</strong>.</p><p>concepts: improve cognitive economy, help us make useful predictions and generalizations, communicate.</p><p>cognitive economy: prototype theory,</p><p>classical theory, pros: intuitive, economical, definitions are easy to communicate, easy to check category membership against definition. cons: hard to find satisfactory definitions, borderline/debatable cases, <strong>typicality effects</strong>.</p><p>category membership isn’t always clear cut, not just that people have different clear-cut categories: There is within-subjects inconsistency.</p><p>Typicality effect: the classical theory predicts that typical and atypical category. it take longer for some gray concept or objects.</p><p>similarity and resemblance,</p><p><strong>prototype theory</strong>: categories are organized around a category prototype. <strong>averages</strong>. summary representation. category membership is similarity-based. categories under prototype view is “fuzzy”, with no clear cut distinction, and organized around typical properties or correlated attributes. regression model is an example.</p><p>alternative theory <strong>exemplar theory</strong>: A category is represented by list previously encountered exemplars new exemplars are compared to known exemplars – most similar item will influence classification the most. k-nn classifier is an example.</p><p>prototype treat category membership as classification of objects, exemplar treat category membership as a property to objects.</p><p>problem for similarity in general: Options can change the implicit similarity function, but Generalization does not depend on general-purpose similarity, typicality isn’t just a matter of (simple) similarity, Compositionality: Similarity-based approaches don’t give a good account of how categories should compose.</p><p>Theory-based view: theory theories: not only based on similarity, but also based on explanatory relationships. history. we learn categories faster when we understand wht the features go together.</p><p>relationship between categories: hierarchical structure</p><p>3 level model: the computation level, the algorithm level, the implementation level.</p><p>rational analysis: goals environment limitations optimization. Goals: prediction adn generalization, communication</p><p>optimization: local MAP (“maximum a posteriori”), pick the highest-probability inference. particle filters, guess how things should grouped. particle filter works very well.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;concepts&lt;/strong&gt; as mental representations of classes objects or events. They determine how things are &lt;strong&gt;related&lt;/strong&gt; </summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Cognitive Science" scheme="http://discover304.github.io/categories/University/LectureNote/Cognitive-Science/"/>
    
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="基础" scheme="http://discover304.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="知识" scheme="http://discover304.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
    <category term="整理" scheme="http://discover304.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>RA Lecture Note: Symbolic Planning Continuous 施工中~</title>
    <link href="http://discover304.github.io/2021/03/07/30-1-RA-Note/"/>
    <id>http://discover304.github.io/2021/03/07/30-1-RA-Note/</id>
    <published>2021-03-07T00:55:00.000Z</published>
    <updated>2021-03-07T11:03:25.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复习的时候加上图片固化一些模板"><a class="markdownIt-Anchor" href="#复习的时候加上图片固化一些模板"></a> 复习的时候加上图片，固化一些模板</h2><h2 id="tools-collection"><a class="markdownIt-Anchor" href="#tools-collection"></a> Tools Collection</h2><ul><li>Monitoring</li><li>Hierarchical planning</li><li>Hierarchical task network (HTN)</li><li>High level action (HLA)</li><li>refinement</li></ul><h2 id="template"><a class="markdownIt-Anchor" href="#template"></a> Template</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- refinements --&gt;</span><br><span class="line">Refinment(&#123;ActionName&#125;(variable1, variable2),</span><br><span class="line">    Precond: &#123;constraints&#125;</span><br><span class="line">    Steps: &#123;action list&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="monitoring-and-replanning-in-unbounded-num-determinism"><a class="markdownIt-Anchor" href="#monitoring-and-replanning-in-unbounded-num-determinism"></a> Monitoring and replanning in unbounded num-determinism</h2><p>Execution monitoring includes action monitoring, plan monitoring.</p><h2 id="hierarchical-planning"><a class="markdownIt-Anchor" href="#hierarchical-planning"></a> Hierarchical Planning</h2><p>hierarchical decomposition, Hierarchical task network (HTN) planning: initial plan provided only high-level description, refined by action refinements. refinement process continued until plan consists only of primitive actions.</p><p>High level action (HLA) has (at least) one refinement into a sequence of actions. If they’re all primitive, then that’s an implementation of the HLA.</p><p>High-level Plans (HLP) are a sequence of HLAs. A HLP achieves the goal from an initial state if at least one of its implementations does this. Not all implementations of an HLP have to reach the goal state!</p><h2 id="search-for-a-valid-hlp"><a class="markdownIt-Anchor" href="#search-for-a-valid-hlp"></a> Search for a valid HLP</h2><p>breadth-first search refinement list.</p><h2 id="probability"><a class="markdownIt-Anchor" href="#probability"></a> Probability</h2><p>quantify uncertainty, degree of belief, degrees of tru[th.</p><p>decision theory, probability theory + utility theory.</p><p>maximum expected utility (expected value)</p><p>nothing special, all ideas has been discussed in logic class.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复习的时候加上图片固化一些模板&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#复习的时候加上图片固化一些模板&quot;&gt;&lt;/a&gt; 复习的时候加上图片，固化一些模板&lt;/h2&gt;
&lt;h2 id=&quot;tools-collection&quot;&gt;&lt;a class=</summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Reasoning and Agent" scheme="http://discover304.github.io/categories/University/LectureNote/Reasoning-and-Agent/"/>
    
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="http://discover304.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="人工智能" scheme="http://discover304.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>RA Lecture Note: Symbolic Planning 1 施工中~</title>
    <link href="http://discover304.github.io/2021/03/01/30-0-RA-Note/"/>
    <id>http://discover304.github.io/2021/03/01/30-0-RA-Note/</id>
    <published>2021-03-01T06:30:49.000Z</published>
    <updated>2021-03-07T11:03:38.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复习的时候加上图片固化一些模板"><a class="markdownIt-Anchor" href="#复习的时候加上图片固化一些模板"></a> 复习的时候加上图片，固化一些模板</h2><h2 id="tools-collection"><a class="markdownIt-Anchor" href="#tools-collection"></a> Tools Collection</h2><ul><li>search-based problem-solving agent</li><li>logic-based planning agent</li><li>Planning definition domain language (PDDL)</li><li>state-space search<ul><li>forward state-space search</li><li>backward state-space search</li></ul></li><li>plan-space search<ul><li>partial-order planning</li></ul></li></ul><h2 id="template"><a class="markdownIt-Anchor" href="#template"></a> Template</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- PDDL --&gt;</span><br><span class="line">Initial State: &#123;state&#125;</span><br><span class="line">Goal State: &#123;state&#125;</span><br><span class="line">Action(&#123;ActionName&#125;(variable1,variable2,...)</span><br><span class="line">    Precond:&#123;a conjunction, all positive&#125;,</span><br><span class="line">    Effect:&#123;a conjunction, can extend to disjunction and conditional&#125;)</span><br></pre></td></tr></table></figure><p>note: conditional effects are in the form: {<strong>when</strong> A: B}<br />note: conditional steps are in the form: {<strong>if</strong> A <strong>then</strong> B <strong>else</strong> C}<br />note: or in the form: {<strong>if</strong> A <strong>then</strong> B <strong>elseif</strong> C <strong>then</strong> D <strong>else</strong> E}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- POP --&gt;</span><br><span class="line">Actions: &#123;list of names of actions&#125;</span><br><span class="line">Orderings: &#123;list of order constraints for actions, in form: A ≺ B&#125;</span><br><span class="line">Links: &#123;available progression form one action to another, in form: A-&gt;^p B&#125;</span><br><span class="line">Open preconditions: &#123;set of conditions not yet achieved&#125;</span><br></pre></td></tr></table></figure><p>note: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≺</mo></mrow><annotation encoding="application/x-tex">\prec</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">≺</span></span></span></span> is <code>\prec</code> by Tex, means: A must occur before B.<br />note: A -&gt;^p B is actually <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mover><mo stretchy="true">→</mo><mpadded width="+0.6em" lspace="0.3em"><mi>p</mi></mpadded></mover><mi>B</mi></mrow><annotation encoding="application/x-tex">A \xrightarrow{p} B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.934392em;vertical-align:-0.01100000000000001em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel x-arrow"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.923392em;"><span style="top:-3.322em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight x-arrow-pad"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="svg-align" style="top:-2.689em;"><span class="pstrut" style="height:2.7em;"></span><span class="hide-tail" style="height:0.522em;min-width:1.469em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.01100000000000001em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- percept schema models --&gt;</span><br><span class="line">Percept(&#123;ActionName&#125;(variable1,variable2,...)</span><br><span class="line">    Precond: &#123;a conjunction, all positive&#125;)</span><br></pre></td></tr></table></figure><h2 id="what-is-planning-and-why-we-need-new-method-to-find-a-plan"><a class="markdownIt-Anchor" href="#what-is-planning-and-why-we-need-new-method-to-find-a-plan"></a> what is planning and why we need new method to find a plan</h2><p>the first block of this course learnt about notation of agents, intelligent problem-solving, heuristic search, constraints, logic and logical reasoning, reasoning about actions and time, and in the future we will talk about planning and uncertainty, where change is the key topic in the second block of this course.</p><p>planning is the task of coming up with a sequence of actions what will achieve a goal, but we only considering classical planning, in which environments are fully observable, deterministic, finite, static, discrete, which is the simplest environment, and lifting some of these assumptions, raising a little more complex environment, will be the subject of the “uncertainty” part of the course.</p><p><strong>search-based problem-solving agent</strong> and logical planning agents are not enough to achieve the goal in some or even most of planning problem, as the search-based problem solving agent has no goal-directness, has no problem decomposition into sub-goals that build on each other, which cause undo past achievements, has simple goal test doesn’t allow for the identification of milestones, besides, how to find a good heuristic function and how we model the way humans perceive complex goals and the quality of a plan are still mystery.</p><p><strong>logical planning agents</strong> can solve some of questions we discussed with search-based problem-solving agent, its allow sub-goal and decompose big thing to smaller ones, but logic cannot give us a good proof or even a correct proof, and logically independent sub-goals may need to be undone to achieve other goals, this is a case that the solution stuck at local minimum, this is where non-linear planning being introduced, also I think laziness influence the solution, as there might be other solution if we switch two clauses joint by logic connector.</p><p>Both search and logic are important tools but need adapting to tackles: efficient search and inference and discriminating the variable quality of valid plans.</p><h2 id="what-is-pddl-and-what-it-consists-of"><a class="markdownIt-Anchor" href="#what-is-pddl-and-what-it-consists-of"></a> what is PDDL and what it consists of</h2><p><strong>Planning definition domain language (PDDL)</strong>, which is a language expressive enough to cover interesting problems, restrictive enough to allow efficient algorithms, and allow us express <strong>states</strong>, <strong>actions</strong> (edge) and <strong>goals</strong> (also a state).</p><p><strong>States</strong> are represented as conjunctions of <strong>propositional</strong> or <strong>function-free</strong> first order <strong>positive</strong> literals, and goal is a partial description of a state, in this case we get no restrictions which have applied to states, besides, a state should be a closed-world assumption.</p><p><strong>action</strong> or action schemata, as they may contain variables, include the  <strong>action name</strong>, a <strong>precondition</strong> description defines states in which action is executable, should be a conjunction of positive and negative literals, where all variables must occur in action name, and finally a <strong>effect</strong> description which defines how literals in the input state get changed and we assume that anything not mentioned remaining the same, it has same restriction as preconditions with an extra one, we need often to divide positive and negative effects into add list and delete list.</p><p>any action is <strong>applicable</strong> in any state that satisfies the precondition with an appropriate substitution for parameters.</p><p><strong>result</strong> of executing action an state s in state s’ with any positive literal P in a’s effects added to the state and every negative literal not P removed from it, then <strong>solution</strong> is the action sequence that leads from the initial state to a state that satisfies the goal.</p><h2 id="some-free-words"><a class="markdownIt-Anchor" href="#some-free-words"></a> some free words</h2><p>serious choice on how to describe a world, in term of vocabulary of predicate symbols that you use, that can either make you job easy or difficult.</p><h2 id="lets-do-state-space-search"><a class="markdownIt-Anchor" href="#lets-do-state-space-search"></a> let’s do state-space search</h2><p>state-space search, search the space of states using action schemata, bi-direction search is possible, so there are two type of search: <strong>forward state-space search</strong> (also called progression planning) and <strong>backward state-space search</strong>.</p><p>Any complete graph search algorithm (like A*) will be a complete graph panning algorithm.</p><p>Forward search does not solve problem of irrelevant actions (all actions considered from each state).</p><p><strong>Heuristic for state-space search</strong>, <strong>divide and conquer</strong> (subgoal decomposition) and <strong>derive a relaxed problem</strong> (remove some constraints) are two possibilities to design a heuristic function.</p><h2 id="lets-do-partial-order-planning"><a class="markdownIt-Anchor" href="#lets-do-partial-order-planning"></a> let’s do partial-order planning</h2><p><strong>State-space search planning</strong> algorithms consider totally ordered sequences of actions.</p><p><strong>partial-order planning</strong> (POP), <strong>Actions</strong> initial Start and Finish, <strong>Ordering</strong> constraints, <strong>causal links</strong> not allows conflict occur, Open preconditions.</p><p>“partial” means we only focus on clauses that we think we need. Partial-order solution will correspond to one or several linearisation of partial-order plan.</p><p>Consistent plan = plan without cycles in orderings and conflicts with links. Solution = consistent plan without open preconditions. Every linearisation of a partial-order solution is a total-order solution (implications for execution!).</p><p>This is an algorithm highly benefit with graph.</p><h2 id="classical-planning-the-contingent-planning"><a class="markdownIt-Anchor" href="#classical-planning-the-contingent-planning"></a> classical planning, the contingent planning</h2><p>so far we only looked at classical planning, fully observable, static, deterministic. action descriptions are correct and compete. But unrealistic in many real-world applications. bounded, unbounded, conformant planning or sensorless, achieve goal in all possible circumstances. contingency planning, partially observable, non-deterministic environments, includes sensing actions and describes different paths for different circumstances. online planning and replanning, check whether plan requires revision during execution and replan accordingly.</p><p>percept schema models the agent’s sensors, Percept, precond, sensorless has no sensor and fully observable has no percept for a percept model.</p><p>PDDL conditional effect, when, if then else, “or”. acyclic, cyclic solutions, terminate with failure if circle occur, solved by add a branch back to the root. AND-OR graphs.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复习的时候加上图片固化一些模板&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#复习的时候加上图片固化一些模板&quot;&gt;&lt;/a&gt; 复习的时候加上图片，固化一些模板&lt;/h2&gt;
&lt;h2 id=&quot;tools-collection&quot;&gt;&lt;a class=</summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Reasoning and Agent" scheme="http://discover304.github.io/categories/University/LectureNote/Reasoning-and-Agent/"/>
    
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="http://discover304.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="人工智能" scheme="http://discover304.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>IADS Revision Note: Language Processing Basic</title>
    <link href="http://discover304.github.io/2021/02/27/17-1-IADS-revision-note/"/>
    <id>http://discover304.github.io/2021/02/27/17-1-IADS-revision-note/</id>
    <published>2021-02-27T13:17:23.000Z</published>
    <updated>2021-02-28T08:47:53.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cfg-and-syntax-tree"><a class="markdownIt-Anchor" href="#cfg-and-syntax-tree"></a> CFG and syntax tree</h2><p>context-free languages are common to both artificial languages and natural languages, can be resolved by syntax tree, which displays the grammatical consistent structure of a language text and constructing the tree is a step in many language processing (LP) tasks.</p><p>grammar specify what syntax tree is possible, consist of terminals of grammar or the leaf of syntax and non-terminals that not appear in sentences of language.</p><p>generating syntax tree from grammar, beginning with start symbol, repeatedly expanding non-terminal symbols, and we can generate infinitely many strings from this finite grammar, and the set of all strings generated by this grammar is defined as language, in term of language, we can also define it as set of derivations involving sentential forms, which is any sequence of terminals and non-terminals, that can appear in a derivation starting from the start symbol.</p><p>syntax trees may have structural ambiguity, which means one sentence several tree, and to avoid this we need carefully design grammar, but in real life, the natural language, structural ambiguity is a fact of life.</p><p>A context free grammar (CFG) consists of a finite set of terminals, a finite set of non-terminals, a choice of start symbols, a finite set of productions.</p><p>In terms of context free, we mean the derivations not depend on follow up derivations, there also something called context sensitive grammar, which depend on future derivation, for example, VB is context sensitive programming language.</p><h2 id="parsing-problemcyk-and-cnf"><a class="markdownIt-Anchor" href="#parsing-problemcyk-and-cnf"></a> parsing problem，CYK and CNF</h2><p>parsing problem is the one convert the string of terminals to syntax tree, to solve this problem, we can use CYK algorithm, with Chomsky normal form (CNF, notice that CNF also an abbreviation of conjunctive normal form), and the impressing thing is that this algorithm is dynamic, and can operate in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> or, if we allow grammar to vary, the runtime would be <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mn^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, where m is the size of grammar, if we allow ternary rules (conflict with CNF) in CYK, the runtime would be <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> and this is one major reason using CNF in CYK.</p><p>We know that any CFG can convert to CNF, which is a grammar form that each RHS consists of either just two non-terminals or just one terminal, just like a binary tree, by adding new non-terminals.</p><p>CYK algorithm can identify all possible parses of a string of terminals by a recognizer, which determines if a given string belongs to the given language, also the one has no parses, called phantom constituents, can be recognized.</p><p>Getting the smallest CNF grammar equivalent to a CFG is NP-hard, in other words, there are no known polynomial-time algorithm, where NP denotes nondeterministic polynomial time.</p><p>Versions of CYK are quite widely used in Natural language context, where sentences typically have &lt;100 words, but <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> runtime is not friendly to parse computer languages as programs may be massive.</p><h2 id="ll1-parsing"><a class="markdownIt-Anchor" href="#ll1-parsing"></a> LL(1) parsing</h2><p>The thought behind LL(1) predictive parsing is predicting by rule from just current token, by token we mean the word identify the non-terminal expansion, and ensure unique rule in each cell of a parse table, which is a table telling us which rule to apply in given situation denoted by non-terminal and terminal pair, also there is a new one called Blank entries, which is situations that never arise for a legal input.</p><p>LL(1) predictive parsing is done very efficiently with stack, which records the predicted form for the remaining input, with 3 type error messages, Error if no rule, Error if stack symbol is any other terminal, Error if stack empties sooner, moreover, the stack input has two functions, if the next peek is a terminal, it should pop this terminal, if the next peek is a non-terminal, it should check the parse table for the rule.</p><p>Notice that the stack pops from left to right, or growing from right to left.</p><p>LL(1) is an example of a top-down parser, builds syntax trees from the root, while CYK is bottom-up method, and LL(1) can runs in time <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> with small hidden constants, so it would be great if we try to ensure a CF language has LL(1) grammar.</p><p>LL(1) is nice for simple ‘command languages’ and the ‘lightweight’ parsing algorithm is a plus, but for large-scale languages, which want a bit more flexibility, LR(1) parsing is used.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;cfg-and-syntax-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cfg-and-syntax-tree&quot;&gt;&lt;/a&gt; CFG and syntax tree&lt;/h2&gt;
&lt;p&gt;context-free language</summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Introduction to Algorithms and Data Structures" scheme="http://discover304.github.io/categories/University/LectureNote/Introduction-to-Algorithms-and-Data-Structures/"/>
    
    
    <category term="笔记整理" scheme="http://discover304.github.io/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    <category term="算法" scheme="http://discover304.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="语言处理" scheme="http://discover304.github.io/tags/%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Google Hash Code Summary 施工中~</title>
    <link href="http://discover304.github.io/2021/02/26/29-Hashcode-experience/"/>
    <id>http://discover304.github.io/2021/02/26/29-Hashcode-experience/</id>
    <published>2021-02-25T21:39:54.000Z</published>
    <updated>2021-02-25T22:19:15.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="感想"><a class="markdownIt-Anchor" href="#感想"></a> 感想</h2><h2 id="key-code"><a class="markdownIt-Anchor" href="#key-code"></a> Key code</h2><p><a href="http://main.py">main.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> helpers <span class="keyword">import</span> IO</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict, List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, duration: <span class="built_in">int</span>, num_intersections: <span class="built_in">int</span>, num_streets: <span class="built_in">int</span>, num_cars: <span class="built_in">int</span>, bonus: <span class="built_in">int</span></span>):</span></span><br><span class="line">        self.duration = duration</span><br><span class="line">        self.num_intersections = num_intersections</span><br><span class="line">        self.num_streets = num_streets</span><br><span class="line">        self.num_cars = num_cars</span><br><span class="line">        self.bonus = bonus</span><br><span class="line">        self.all_streets: Dict[<span class="built_in">str</span>, Street] = <span class="built_in">dict</span>()</span><br><span class="line">        self.all_intersections: List[Intersection] = [Intersection(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_intersections)]</span><br><span class="line">        self.all_cars: List[Car] = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Street</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, begin: <span class="built_in">int</span>, end: <span class="built_in">int</span>, name: <span class="built_in">str</span>, length: <span class="built_in">int</span></span>):</span></span><br><span class="line">        self.begin = begin</span><br><span class="line">        self.end = end</span><br><span class="line">        self.name = name</span><br><span class="line">        self.length = length</span><br><span class="line">        task.all_intersections[end].incoming.append(self.name)</span><br><span class="line">        self.cars: List[Car] = []</span><br><span class="line">        self.greenCarCounts = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;S <span class="subst">&#123;self.name&#125;</span>: <span class="subst">&#123;self.length&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Intersection</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, index: <span class="built_in">int</span></span>):</span></span><br><span class="line">        self.index = index</span><br><span class="line">        self.incoming: List[<span class="built_in">str</span>] = []</span><br><span class="line">        <span class="comment"># self.outgoing = []</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;I <span class="subst">&#123;self.index&#125;</span>: <span class="subst">&#123;self.incoming&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def assignAllIncoming():</span></span><br><span class="line"><span class="comment">#     return none</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, index: <span class="built_in">int</span>, number: <span class="built_in">int</span>, streets: List[<span class="built_in">str</span>]</span>):</span></span><br><span class="line">        self.index = index</span><br><span class="line">        self.number = number</span><br><span class="line">        self.streets = streets</span><br><span class="line">        self.length = <span class="built_in">sum</span>([task.all_streets[street].length <span class="keyword">for</span> street <span class="keyword">in</span> streets])</span><br><span class="line">        self.reached = <span class="literal">True</span></span><br><span class="line">        self.passingstreet = streets[<span class="number">0</span>]</span><br><span class="line">        self.passedstreet = <span class="number">0</span></span><br><span class="line">        self.reachedstreet = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;C <span class="subst">&#123;self.index&#125;</span>: <span class="subst">&#123;self.length&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;def status_update(self):</span></span><br><span class="line"><span class="string">        self.currentlength + +</span></span><br><span class="line"><span class="string">        if self.currentlength == self.passingroad.length:</span></span><br><span class="line"><span class="string">            self.reached = True</span></span><br><span class="line"><span class="string">            self.passedstreet + +</span></span><br><span class="line"><span class="string">            self.reachedstreet = self.passingstreet</span></span><br><span class="line"><span class="string">            self.passingstreet = self.streets[self.passedstreet]</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            self.reached = False</span></span><br><span class="line"><span class="string">            self.reachedstreet = None&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># IO setting</span></span><br><span class="line">    code_io = IO()</span><br><span class="line">    listName = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> listName:</span><br><span class="line">        code_io.set_file_in(<span class="string">&quot;./tasks/&quot;</span>+filename+<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">        code_io.set_file_out(<span class="string">&quot;./results/&quot;</span>+filename+<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">global</span> task</span><br><span class="line">        D, I, S, V, F = code_io.readline_tuple(<span class="built_in">int</span>)</span><br><span class="line">        task = Task(D, I, S, V, F)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(S):</span><br><span class="line">            B, E, Name, L = code_io.readline_tuple(<span class="built_in">str</span>)</span><br><span class="line">            task.all_streets[Name] = Street(<span class="built_in">int</span>(B), <span class="built_in">int</span>(E), Name, <span class="built_in">int</span>(L))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(V):</span><br><span class="line">            Line = code_io.readline_array(<span class="built_in">str</span>)</span><br><span class="line">            task.all_cars.append(Car(i, <span class="built_in">int</span>(Line[<span class="number">0</span>]), Line[<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line">        arr = <span class="built_in">sorted</span>(task.all_cars, key=<span class="keyword">lambda</span> car: car.length)</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        for intersection in task.all_intersections:</span></span><br><span class="line"><span class="string">            greencarlist = [0]*len(intersection.incoming)</span></span><br><span class="line"><span class="string">            for i in range(D):</span></span><br><span class="line"><span class="string">                for cars in task.all_cars:</span></span><br><span class="line"><span class="string">                    cars.update_status()</span></span><br><span class="line"><span class="string">                    if cars.reachedstreet in intersection.incoming:</span></span><br><span class="line"><span class="string">                        if arr.index(cars) &lt; greenCar:</span></span><br><span class="line"><span class="string">                            greenCar = arr.index(cars)</span></span><br><span class="line"><span class="string">                for street in intersection.incoming:</span></span><br><span class="line"><span class="string">                    if street.name==arr[greenCar].reachedstreet:</span></span><br><span class="line"><span class="string">                        greencarlist[intersection.index(street)]+=1</span></span><br><span class="line"><span class="string">                sum(greencarlist)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> cars <span class="keyword">in</span> arr:</span><br><span class="line">            <span class="keyword">for</span> street <span class="keyword">in</span> cars.streets:</span><br><span class="line">                task.all_streets[street].greenCarCounts += <span class="number">1</span></span><br><span class="line">                counter += task.all_streets[street].length</span><br><span class="line">            <span class="keyword">if</span> counter &gt; task.duration:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        code_io.write(<span class="built_in">len</span>(task.all_intersections))</span><br><span class="line">        <span class="keyword">for</span> intersection <span class="keyword">in</span> task.all_intersections:</span><br><span class="line">            code_io.write(intersection.index)</span><br><span class="line">            code_io.write(<span class="built_in">len</span>(intersection.incoming))</span><br><span class="line">            ratio = <span class="built_in">sum</span>([task.all_streets[street].greenCarCounts <span class="keyword">for</span> street <span class="keyword">in</span> intersection.incoming]) / task.duration</span><br><span class="line">            <span class="keyword">for</span> street <span class="keyword">in</span> intersection.incoming:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">int</span>(ceil(task.all_streets[street].greenCarCounts * ratio))) &gt; task.duration:</span><br><span class="line">                    code_io.write(street + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(task.duration))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    code_io.write(street + <span class="string">&quot; &quot;</span> + <span class="built_in">str</span>(<span class="number">1</span> + <span class="built_in">int</span>(ceil(task.all_streets[street].greenCarCounts * ratio))))</span><br><span class="line">        code_io.flush()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(arr)</span></span><br><span class="line">        <span class="comment"># print(task.all_intersections)</span></span><br><span class="line">        <span class="comment"># code_io.write(len(task.all_intersections))</span></span><br><span class="line">        <span class="comment"># for intersection in task.all_intersections:</span></span><br><span class="line">        <span class="comment">#     code_io.write(intersection.index)</span></span><br><span class="line">        <span class="comment">#     code_io.write(len(intersection.incoming))</span></span><br><span class="line">        <span class="comment">#     for street in intersection.incoming:</span></span><br><span class="line">        <span class="comment">#         code_io.write(street + &quot; 1&quot;)</span></span><br><span class="line">        <span class="comment"># code_io.flush()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is the algo</span></span><br><span class="line"><span class="string">for time in range(totaltime):</span></span><br><span class="line"><span class="string">for cars in all_cars:</span></span><br><span class="line"><span class="string">cars.update_status()</span></span><br><span class="line"><span class="string">for intersection in all_intersections:</span></span><br><span class="line"><span class="string">for all cars waiting at this intersection:</span></span><br><span class="line"><span class="string">turn the green light for the car with the smallest index in the array to green</span></span><br><span class="line"><span class="string">            record the green light change for this intersection ID</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def update_status:</span></span><br><span class="line"><span class="string">current_road+=1</span></span><br><span class="line"><span class="string">if current_road==crossingroad.length():</span></span><br><span class="line"><span class="string">waiting=crossingroad</span></span><br><span class="line"><span class="string">        current_road=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def cost():</span></span><br><span class="line"><span class="string">    return (length of remaining route + remaining intersection * itsweight</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://helper.py">helper.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IO</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stdin = sys.stdin</span><br><span class="line">        self.stdout = sys.stdout</span><br><span class="line">        self.buffer = io.StringIO()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_stdin</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stdin = sys.stdin</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_stdout</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stdout = sys.stdout</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_stdio</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.set_stdin()</span><br><span class="line">        self.set_stdout()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_file_in</span>(<span class="params">self, file_name</span>):</span></span><br><span class="line">        self.stdin = <span class="built_in">open</span>(file_name, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_file_out</span>(<span class="params">self, file_name</span>):</span></span><br><span class="line">        self.stdout = <span class="built_in">open</span>(file_name, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_file</span>(<span class="params">self, file_name</span>):</span></span><br><span class="line">        self.set_file_in(file_name)</span><br><span class="line">        self.set_file_out(file_name + time.strftime(<span class="string">&quot;_%H_%M_%S&quot;</span>, time.gmtime()) + <span class="string">&quot;.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readline</span>(<span class="params">self, type_=<span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> type_(self.stdin.readline().strip())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readline_tuple</span>(<span class="params">self, type_=<span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>(type_, self.readline().split())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readline_array</span>(<span class="params">self, type_=<span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(self.readline_tuple(type_))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">self, var, end=<span class="string">&quot;\n&quot;</span></span>):</span></span><br><span class="line">        self.buffer.write(<span class="built_in">str</span>(var) + end)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_array</span>(<span class="params">self, arr, sep=<span class="string">&quot; &quot;</span>, end=<span class="string">&quot;\n&quot;</span></span>):</span></span><br><span class="line">        self.buffer.write(sep.join(<span class="built_in">map</span>(<span class="built_in">str</span>, arr)) + end)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flush</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stdout.write(self.buffer.getvalue())</span><br><span class="line">        self.buffer = io.StringIO()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scoring</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;感想&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#感想&quot;&gt;&lt;/a&gt; 感想&lt;/h2&gt;
&lt;h2 id=&quot;key-code&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#key-code&quot;&gt;&lt;/a&gt; Key co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>plt颜色设置及Matplotlib颜色对照表</title>
    <link href="http://discover304.github.io/2021/02/25/27-Python-plt-color-collection/"/>
    <id>http://discover304.github.io/2021/02/25/27-Python-plt-color-collection/</id>
    <published>2021-02-25T00:54:25.000Z</published>
    <updated>2021-02-25T01:11:47.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="matplotlib几个基本的颜色代码"><a class="markdownIt-Anchor" href="#matplotlib几个基本的颜色代码"></a> Matplotlib几个基本的颜色代码</h2><p>blue( b ), cyan( c ), green( g ), black( k ), magenta( m ), red( r ), white( w ), yellow( y )</p><h2 id="matplotlib颜色对照表"><a class="markdownIt-Anchor" href="#matplotlib颜色对照表"></a> Matplotlib颜色对照表</h2><p><img src="https://finthon.com/wp-content/uploads/2018/10/matplotlib-color-1024x1008.png" alt="Matplotlib颜色对照表" /></p><h2 id="颜色及十六进制对应"><a class="markdownIt-Anchor" href="#颜色及十六进制对应"></a> 颜色及十六进制对应</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">cnames = &#123;</span><br><span class="line"><span class="string">&#x27;aliceblue&#x27;</span>:            <span class="string">&#x27;#F0F8FF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;antiquewhite&#x27;</span>:         <span class="string">&#x27;#FAEBD7&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;aqua&#x27;</span>:                 <span class="string">&#x27;#00FFFF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;aquamarine&#x27;</span>:           <span class="string">&#x27;#7FFFD4&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;azure&#x27;</span>:                <span class="string">&#x27;#F0FFFF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;beige&#x27;</span>:                <span class="string">&#x27;#F5F5DC&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;bisque&#x27;</span>:               <span class="string">&#x27;#FFE4C4&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;black&#x27;</span>:                <span class="string">&#x27;#000000&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;blanchedalmond&#x27;</span>:       <span class="string">&#x27;#FFEBCD&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;blue&#x27;</span>:                 <span class="string">&#x27;#0000FF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;blueviolet&#x27;</span>:           <span class="string">&#x27;#8A2BE2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;brown&#x27;</span>:                <span class="string">&#x27;#A52A2A&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;burlywood&#x27;</span>:            <span class="string">&#x27;#DEB887&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cadetblue&#x27;</span>:            <span class="string">&#x27;#5F9EA0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;chartreuse&#x27;</span>:           <span class="string">&#x27;#7FFF00&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;chocolate&#x27;</span>:            <span class="string">&#x27;#D2691E&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;coral&#x27;</span>:                <span class="string">&#x27;#FF7F50&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cornflowerblue&#x27;</span>:       <span class="string">&#x27;#6495ED&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cornsilk&#x27;</span>:             <span class="string">&#x27;#FFF8DC&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;crimson&#x27;</span>:              <span class="string">&#x27;#DC143C&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;cyan&#x27;</span>:                 <span class="string">&#x27;#00FFFF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkblue&#x27;</span>:             <span class="string">&#x27;#00008B&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkcyan&#x27;</span>:             <span class="string">&#x27;#008B8B&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkgoldenrod&#x27;</span>:        <span class="string">&#x27;#B8860B&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkgray&#x27;</span>:             <span class="string">&#x27;#A9A9A9&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkgreen&#x27;</span>:            <span class="string">&#x27;#006400&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkkhaki&#x27;</span>:            <span class="string">&#x27;#BDB76B&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkmagenta&#x27;</span>:          <span class="string">&#x27;#8B008B&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkolivegreen&#x27;</span>:       <span class="string">&#x27;#556B2F&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkorange&#x27;</span>:           <span class="string">&#x27;#FF8C00&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkorchid&#x27;</span>:           <span class="string">&#x27;#9932CC&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkred&#x27;</span>:              <span class="string">&#x27;#8B0000&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darksalmon&#x27;</span>:           <span class="string">&#x27;#E9967A&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkseagreen&#x27;</span>:         <span class="string">&#x27;#8FBC8F&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkslateblue&#x27;</span>:        <span class="string">&#x27;#483D8B&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkslategray&#x27;</span>:        <span class="string">&#x27;#2F4F4F&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkturquoise&#x27;</span>:        <span class="string">&#x27;#00CED1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;darkviolet&#x27;</span>:           <span class="string">&#x27;#9400D3&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;deeppink&#x27;</span>:             <span class="string">&#x27;#FF1493&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;deepskyblue&#x27;</span>:          <span class="string">&#x27;#00BFFF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;dimgray&#x27;</span>:              <span class="string">&#x27;#696969&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;dodgerblue&#x27;</span>:           <span class="string">&#x27;#1E90FF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;firebrick&#x27;</span>:            <span class="string">&#x27;#B22222&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;floralwhite&#x27;</span>:          <span class="string">&#x27;#FFFAF0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;forestgreen&#x27;</span>:          <span class="string">&#x27;#228B22&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;fuchsia&#x27;</span>:              <span class="string">&#x27;#FF00FF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;gainsboro&#x27;</span>:            <span class="string">&#x27;#DCDCDC&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ghostwhite&#x27;</span>:           <span class="string">&#x27;#F8F8FF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;gold&#x27;</span>:                 <span class="string">&#x27;#FFD700&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;goldenrod&#x27;</span>:            <span class="string">&#x27;#DAA520&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;gray&#x27;</span>:                 <span class="string">&#x27;#808080&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;green&#x27;</span>:                <span class="string">&#x27;#008000&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;greenyellow&#x27;</span>:          <span class="string">&#x27;#ADFF2F&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;honeydew&#x27;</span>:             <span class="string">&#x27;#F0FFF0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;hotpink&#x27;</span>:              <span class="string">&#x27;#FF69B4&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;indianred&#x27;</span>:            <span class="string">&#x27;#CD5C5C&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;indigo&#x27;</span>:               <span class="string">&#x27;#4B0082&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;ivory&#x27;</span>:                <span class="string">&#x27;#FFFFF0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;khaki&#x27;</span>:                <span class="string">&#x27;#F0E68C&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lavender&#x27;</span>:             <span class="string">&#x27;#E6E6FA&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lavenderblush&#x27;</span>:        <span class="string">&#x27;#FFF0F5&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lawngreen&#x27;</span>:            <span class="string">&#x27;#7CFC00&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lemonchiffon&#x27;</span>:         <span class="string">&#x27;#FFFACD&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightblue&#x27;</span>:            <span class="string">&#x27;#ADD8E6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightcoral&#x27;</span>:           <span class="string">&#x27;#F08080&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightcyan&#x27;</span>:            <span class="string">&#x27;#E0FFFF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightgoldenrodyellow&#x27;</span>: <span class="string">&#x27;#FAFAD2&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightgreen&#x27;</span>:           <span class="string">&#x27;#90EE90&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightgray&#x27;</span>:            <span class="string">&#x27;#D3D3D3&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightpink&#x27;</span>:            <span class="string">&#x27;#FFB6C1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightsalmon&#x27;</span>:          <span class="string">&#x27;#FFA07A&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightseagreen&#x27;</span>:        <span class="string">&#x27;#20B2AA&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightskyblue&#x27;</span>:         <span class="string">&#x27;#87CEFA&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightslategray&#x27;</span>:       <span class="string">&#x27;#778899&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightsteelblue&#x27;</span>:       <span class="string">&#x27;#B0C4DE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lightyellow&#x27;</span>:          <span class="string">&#x27;#FFFFE0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;lime&#x27;</span>:                 <span class="string">&#x27;#00FF00&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;limegreen&#x27;</span>:            <span class="string">&#x27;#32CD32&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;linen&#x27;</span>:                <span class="string">&#x27;#FAF0E6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;magenta&#x27;</span>:              <span class="string">&#x27;#FF00FF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;maroon&#x27;</span>:               <span class="string">&#x27;#800000&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mediumaquamarine&#x27;</span>:     <span class="string">&#x27;#66CDAA&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mediumblue&#x27;</span>:           <span class="string">&#x27;#0000CD&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mediumorchid&#x27;</span>:         <span class="string">&#x27;#BA55D3&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mediumpurple&#x27;</span>:         <span class="string">&#x27;#9370DB&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mediumseagreen&#x27;</span>:       <span class="string">&#x27;#3CB371&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mediumslateblue&#x27;</span>:      <span class="string">&#x27;#7B68EE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mediumspringgreen&#x27;</span>:    <span class="string">&#x27;#00FA9A&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mediumturquoise&#x27;</span>:      <span class="string">&#x27;#48D1CC&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mediumvioletred&#x27;</span>:      <span class="string">&#x27;#C71585&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;midnightblue&#x27;</span>:         <span class="string">&#x27;#191970&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mintcream&#x27;</span>:            <span class="string">&#x27;#F5FFFA&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;mistyrose&#x27;</span>:            <span class="string">&#x27;#FFE4E1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;moccasin&#x27;</span>:             <span class="string">&#x27;#FFE4B5&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;navajowhite&#x27;</span>:          <span class="string">&#x27;#FFDEAD&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;navy&#x27;</span>:                 <span class="string">&#x27;#000080&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;oldlace&#x27;</span>:              <span class="string">&#x27;#FDF5E6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;olive&#x27;</span>:                <span class="string">&#x27;#808000&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;olivedrab&#x27;</span>:            <span class="string">&#x27;#6B8E23&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;orange&#x27;</span>:               <span class="string">&#x27;#FFA500&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;orangered&#x27;</span>:            <span class="string">&#x27;#FF4500&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;orchid&#x27;</span>:               <span class="string">&#x27;#DA70D6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;palegoldenrod&#x27;</span>:        <span class="string">&#x27;#EEE8AA&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;palegreen&#x27;</span>:            <span class="string">&#x27;#98FB98&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;paleturquoise&#x27;</span>:        <span class="string">&#x27;#AFEEEE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;palevioletred&#x27;</span>:        <span class="string">&#x27;#DB7093&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;papayawhip&#x27;</span>:           <span class="string">&#x27;#FFEFD5&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;peachpuff&#x27;</span>:            <span class="string">&#x27;#FFDAB9&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;peru&#x27;</span>:                 <span class="string">&#x27;#CD853F&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pink&#x27;</span>:                 <span class="string">&#x27;#FFC0CB&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;plum&#x27;</span>:                 <span class="string">&#x27;#DDA0DD&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;powderblue&#x27;</span>:           <span class="string">&#x27;#B0E0E6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;purple&#x27;</span>:               <span class="string">&#x27;#800080&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;red&#x27;</span>:                  <span class="string">&#x27;#FF0000&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;rosybrown&#x27;</span>:            <span class="string">&#x27;#BC8F8F&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;royalblue&#x27;</span>:            <span class="string">&#x27;#4169E1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;saddlebrown&#x27;</span>:          <span class="string">&#x27;#8B4513&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;salmon&#x27;</span>:               <span class="string">&#x27;#FA8072&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sandybrown&#x27;</span>:           <span class="string">&#x27;#FAA460&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;seagreen&#x27;</span>:             <span class="string">&#x27;#2E8B57&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;seashell&#x27;</span>:             <span class="string">&#x27;#FFF5EE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sienna&#x27;</span>:               <span class="string">&#x27;#A0522D&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;silver&#x27;</span>:               <span class="string">&#x27;#C0C0C0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;skyblue&#x27;</span>:              <span class="string">&#x27;#87CEEB&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;slateblue&#x27;</span>:            <span class="string">&#x27;#6A5ACD&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;slategray&#x27;</span>:            <span class="string">&#x27;#708090&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;snow&#x27;</span>:                 <span class="string">&#x27;#FFFAFA&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;springgreen&#x27;</span>:          <span class="string">&#x27;#00FF7F&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;steelblue&#x27;</span>:            <span class="string">&#x27;#4682B4&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tan&#x27;</span>:                  <span class="string">&#x27;#D2B48C&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;teal&#x27;</span>:                 <span class="string">&#x27;#008080&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;thistle&#x27;</span>:              <span class="string">&#x27;#D8BFD8&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;tomato&#x27;</span>:               <span class="string">&#x27;#FF6347&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;turquoise&#x27;</span>:            <span class="string">&#x27;#40E0D0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;violet&#x27;</span>:               <span class="string">&#x27;#EE82EE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;wheat&#x27;</span>:                <span class="string">&#x27;#F5DEB3&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;white&#x27;</span>:                <span class="string">&#x27;#FFFFFF&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;whitesmoke&#x27;</span>:           <span class="string">&#x27;#F5F5F5&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;yellow&#x27;</span>:               <span class="string">&#x27;#FFFF00&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;yellowgreen&#x27;</span>:          <span class="string">&#x27;#9ACD32&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;matplotlib几个基本的颜色代码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#matplotlib几个基本的颜色代码&quot;&gt;&lt;/a&gt; Matplotlib几个基本的颜色代码&lt;/h2&gt;
&lt;p&gt;blue( b ), cyan( c ),</summary>
      
    
    
    
    <category term="Library" scheme="http://discover304.github.io/categories/Library/"/>
    
    <category term="ToolBook" scheme="http://discover304.github.io/categories/Library/ToolBook/"/>
    
    
    <category term="参考" scheme="http://discover304.github.io/tags/%E5%8F%82%E8%80%83/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="Python" scheme="http://discover304.github.io/tags/Python/"/>
    
    <category term="整理" scheme="http://discover304.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
    <category term="仓库" scheme="http://discover304.github.io/tags/%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Week 4 Language Use in the Wild</title>
    <link href="http://discover304.github.io/2021/02/23/28-1-CG-Lecture-note/"/>
    <id>http://discover304.github.io/2021/02/23/28-1-CG-Lecture-note/</id>
    <published>2021-02-23T09:21:24.000Z</published>
    <updated>2021-02-24T03:03:02.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lecture-101-communication"><a class="markdownIt-Anchor" href="#lecture-101-communication"></a> Lecture 10.1 Communication</h2><h3 id="key-linkage"><a class="markdownIt-Anchor" href="#key-linkage"></a> Key linkage</h3><ul><li>Communication is a goal: to transfer information from source<br />to destination.</li><li>If M and F are independent, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mi mathvariant="normal">∣</mi><mi>F</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(M|F) = H(M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span>.</li><li>If F deterministically map to M, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mi mathvariant="normal">∣</mi><mi>F</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H(M|F) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>.</li></ul><h3 id="key-terms"><a class="markdownIt-Anchor" href="#key-terms"></a> Key terms</h3><p><strong>communication</strong>, information, source, destination, computational level goal, necessary subgoal</p><p>source, probability distribution over meaning, <strong>transmitter</strong>, encoder, function, meaning, form, <strong>receiver</strong>, decoder, noise source, reference resolution</p><p>information theory, information content, surprise, entropy, uncertainty, outcome, conditional entropy, mutual information, deterministic, KL divergence</p><h3 id="equation-or-formula-or-method-collection"><a class="markdownIt-Anchor" href="#equation-or-formula-or-method-collection"></a> Equation or Formula or method collection</h3><ul><li>Surprisal: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>x</mi></msub><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x)=-log_xP(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></li><li>Entropy: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∑</mo><mi>x</mi></msub><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X)=\sum_x P(x)I(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0497100000000001em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0016819999999999613em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></li><li>Mutual information: the information shared between two variables <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">;</mo><mi>F</mi><mo stretchy="false">)</mo><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mo>−</mo><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mi mathvariant="normal">∣</mi><mi>F</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(M; F) = H(M) - H(M|F)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose">)</span></span></span></span></li><li>Kullback-Leibler (KL) Divergence: The information gained by using distribution P compared to distribution Q <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mi>L</mi><mo stretchy="false">(</mo><mi>P</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>Q</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mo>∑</mo><mi>x</mi></msub><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mfrac><mrow><mi>Q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">KL(P||Q) = -\sum_xP(x)log\frac{Q(x)}{P(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">Q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0016819999999999613em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">Q</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><h2 id="lecture-102-computational-psycholinguistics"><a class="markdownIt-Anchor" href="#lecture-102-computational-psycholinguistics"></a> Lecture 10.2 Computational Psycholinguistics</h2><h3 id="key-terms-2"><a class="markdownIt-Anchor" href="#key-terms-2"></a> Key terms</h3><p>tool, frequent, homophone, word sense, information processing effect, reading time,</p><h3 id="key-linkage-2"><a class="markdownIt-Anchor" href="#key-linkage-2"></a> Key linkage</h3><ul><li>Language as a communication system seems optimized for efficiency.</li><li>Highly needed words are:<ul><li>short in length</li><li>close to each other in sentences</li><li>versatile</li></ul></li><li>Homophones: Same sounds but different meanings</li><li>Word Sense: A single meaning of a word</li></ul><h2 id="lecture-11-linguistic-diversity-efficient-communication"><a class="markdownIt-Anchor" href="#lecture-11-linguistic-diversity-efficient-communication"></a> Lecture 11 Linguistic Diversity &amp; Efficient Communication</h2><h3 id="key-linkage-3"><a class="markdownIt-Anchor" href="#key-linkage-3"></a> Key linkage</h3><ul><li>Sapir-Whorf Hypothesis<ul><li>Languages carve up the world in different ways.</li><li>Does this influence our conceptual system?</li></ul></li><li>You cannot minimize two superlatives without specifying how they trade-off.</li><li>Objective Function<ul><li>Minimize Description Length (Algorithmic Complexity)</li><li>Minimize Communicative Cost: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mi>L</mi><mo stretchy="false">[</mo><mi>M</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>M</mi><mo>^</mo></mover><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">KL[M||\hat{M}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">L</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mclose">]</span></span></span></span></li></ul></li><li>There are a variety of fields that study linguistic diversity.<ul><li>Sociolinguistics</li><li>Linguistic Anthropology</li><li>Linguistic Typology</li></ul></li><li>Semantic typology studies how different languages carve up the world.</li><li>Recently, information theory has helped characterize and explain the diversity of semantic systems as communicative efficiency trade-offs.</li><li>This is in line with the soft take of the Sapir-Whorf Hypothesis.</li></ul><h3 id="key-terms-3"><a class="markdownIt-Anchor" href="#key-terms-3"></a> Key terms</h3><p>linguistic diversity, Sapir-Whorf Hypothesis, World Color Survey, Munsell Color Chart, basic color term, efficiency trade-off, principle of least effort, force of unification, force of diversification, communicative efficiency trade-offs, the information bottleneck, theoretical limit, observation, hypothetical variant, kinship system, objective function, description length, communication cost,</p><h3 id="equation-or-formula-or-method-collection-2"><a class="markdownIt-Anchor" href="#equation-or-formula-or-method-collection-2"></a> Equation or Formula or method collection</h3><ul><li>The information bottleneck, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>β</mi></msub><mo stretchy="false">[</mo><mi>q</mi><mo stretchy="false">(</mo><mi>w</mi><mi mathvariant="normal">∣</mi><mi>m</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><msub><mi>I</mi><mi>q</mi></msub><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">;</mo><mi>W</mi><mo stretchy="false">)</mo><mo>−</mo><mi>β</mi><mi>K</mi><mi>L</mi><mo stretchy="false">[</mo><mi>M</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>M</mi><mo>^</mo></mover><mo stretchy="false">]</mo><mo>=</mo><msub><mi>I</mi><mi>q</mi></msub><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">;</mo><mi>W</mi><mo stretchy="false">)</mo><mo>−</mo><mi>β</mi><msub><mi>I</mi><mi>q</mi></msub><mo stretchy="false">(</mo><mi>W</mi><mo separator="true">;</mo><mi>U</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F_β[q(w|m)]= I_q(M; W )-βKL[M||\hat{M}]= I_q(M; W )-βI_q(W ;U)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord">∣</span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">L</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mclose">)</span></span></span></span></li></ul><h2 id="lecture-121-vector-space-semantics-intuition"><a class="markdownIt-Anchor" href="#lecture-121-vector-space-semantics-intuition"></a> Lecture 12.1 Vector Space Semantics: Intuition</h2><h3 id="key-terms-4"><a class="markdownIt-Anchor" href="#key-terms-4"></a> Key terms</h3><p>context vector, context words, target words, distributional similarity, syntactic categories, context window, wording meaning, LSA, dimensionality reduction step,</p><h2 id="lecture-122-vector-space-semantics-implementation"><a class="markdownIt-Anchor" href="#lecture-122-vector-space-semantics-implementation"></a> Lecture 12.2 Vector Space Semantics: Implementation</h2><h3 id="key-terms-5"><a class="markdownIt-Anchor" href="#key-terms-5"></a> Key terms</h3><p>learn, word embedding, neural network, guess a word from its context, representation of the context, representation of the word, words within a context window, count vector, Word2V Model, the input and output layers are one-hot encoded, each word is represented as a vector of size V, the number of words in the vocabulary, representation learning</p><h3 id="key-linkage-4"><a class="markdownIt-Anchor" href="#key-linkage-4"></a> Key linkage</h3><ul><li>after training, the hidden layer <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">h_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> for target word <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> can be used as its context vector.</li></ul><h2 id="lecture-123-vector-space-semantics-evaluation"><a class="markdownIt-Anchor" href="#lecture-123-vector-space-semantics-evaluation"></a> Lecture 12.3 Vector Space Semantics: Evaluation</h2><h3 id="key-terms-6"><a class="markdownIt-Anchor" href="#key-terms-6"></a> Key terms</h3><p>model evaluation, semantic priming, lexical decision experiment,</p><h3 id="key-linkage-5"><a class="markdownIt-Anchor" href="#key-linkage-5"></a> Key linkage</h3><ul><li>Strengths:<ul><li>learns word representations automatically from raw text;</li><li>simple approach: all we need is a corpus and some notion of what counts as a word;</li><li>language-independent, cognitively plausible.</li></ul></li><li>Weaknesses:<ul><li>many ad-hoc parameters when creating the embeddings;</li><li>ambiguous words: their meaning is the average of all senses;</li><li>no representation of word order</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;lecture-101-communication&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lecture-101-communication&quot;&gt;&lt;/a&gt; Lecture 10.1 Communication&lt;/h2&gt;
&lt;h3 i</summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Cognitive Science" scheme="http://discover304.github.io/categories/University/LectureNote/Cognitive-Science/"/>
    
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="基础" scheme="http://discover304.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="知识" scheme="http://discover304.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
    <category term="整理" scheme="http://discover304.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Lecture 9 World Learning</title>
    <link href="http://discover304.github.io/2021/02/23/28-0-CG-Lecture-notre/"/>
    <id>http://discover304.github.io/2021/02/23/28-0-CG-Lecture-notre/</id>
    <published>2021-02-23T06:16:23.000Z</published>
    <updated>2021-02-25T00:53:32.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="key-terms"><a class="markdownIt-Anchor" href="#key-terms"></a> Key terms</h2><p>the mapping problem, mutual exclusivity, inductive bias, word single object, fast mapping, word, object, observation, cross-situational word learning, sorting, reasoning, word object, co-occurrence statistics, word referent mapping, intension model, cross-situational information, human simulation paradigm, propose-but-verify, hypothetical mapping, intentional reasoning</p><p>inductive bias, mutual exclusive bias, whole object bias, taxonomic bias, exposure, testing, meaning error, overextension, underestimation, sampling, basic level bias, superordinate, subordinate, size principle likelihood, sampling assumption, shape bias, number words learning, program induction, simplicity, hypothesis space</p><p>generalisation problem, word meaning, rational constructivism, Bayes Rule, program induction</p><h2 id="key-linkage"><a class="markdownIt-Anchor" href="#key-linkage"></a> Key linkage</h2><ul><li>the data are never sufficient logically to eliminate all completing hypotheses.</li><li>We can combine our knowledge about the environment, inductive biases and learning to model how children acquire word meanings by construction. This approach is called Rational Constructivism.</li></ul><h2 id="equation-or-formula"><a class="markdownIt-Anchor" href="#equation-or-formula"></a> Equation or Formula</h2><ul><li>size principle likelihood: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>d</mi><mi mathvariant="normal">∣</mi><mi>h</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi>h</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(d|h)=\frac{1}{|h|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord">∣</span><span class="mord mathdefault">h</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathdefault mtight">h</span><span class="mord mtight">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;key-terms&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#key-terms&quot;&gt;&lt;/a&gt; Key terms&lt;/h2&gt;
&lt;p&gt;the mapping problem, mutual exclusivity, inductive </summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Cognitive Science" scheme="http://discover304.github.io/categories/University/LectureNote/Cognitive-Science/"/>
    
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="基础" scheme="http://discover304.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="知识" scheme="http://discover304.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
    <category term="整理" scheme="http://discover304.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Software Engineering Terms Collection 2</title>
    <link href="http://discover304.github.io/2021/02/22/26-1-SEPP-term-collection2/"/>
    <id>http://discover304.github.io/2021/02/22/26-1-SEPP-term-collection2/</id>
    <published>2021-02-22T09:52:32.000Z</published>
    <updated>2021-02-25T00:52:08.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="abstract"><a class="markdownIt-Anchor" href="#abstract"></a> Abstract</h2><p>This note collect all terms occur in SEPP Lecture 6/7/9. It would be helpful to recap what has learnt and what has already been abstracted away.</p><h2 id="pool-of-atomic-terms"><a class="markdownIt-Anchor" href="#pool-of-atomic-terms"></a> Pool of atomic terms</h2><p>plan-driven development process, heavy documentation, formal documentation, iteration, agile development process, individual, interaction, working software, customer collaboration, responding to change, design, implementation, unfinished feature, requirement engineering, requirement specification document, omnipresent, details</p><p>software project, long-lived system, software product, developing team, small-medium sized system, several potential customer, speedy delivery, feature</p><p>elicitation, interview, survey, facilitated meeting, informal user analysis, informal user discussion</p><p>persona, personalisation, name, personal circumstance, stock photograph, job, education, background, technical skill, experience, relevance, shared vision, key system feature</p><p>scenario, narrative, context, user, perspective of the user, real users, role, responsibility, high-level scenario, use-case scenario, brief statement, overall objective, activity, current system, identified problem, specific details, reality, team member, user, expert, brainstorming, shared understanding, facilitate communication, design creativity, specification</p><p>user story, sequence of interaction, format</p><p>trade-off, simplicity, functionality, familiarity, novelty, automation, control, feature creep, action, action verbs, phrases, simple list, input, action, output, description, constraint, comment, user needs, options</p><p>output, model, UML, Simulink, graphical model, executable model, written document, record reasons, decision, good design, known requirement, future requirements, implementers, existing technology, reusable components, human angle, situation-dependency, OO design, functional design, OO programmer, functional programmer, design choices, future changes, different levels, subsystems, classes, responsibility, interface, message, order</p><p>architecture, fundamental influence, non-functional characteristics, non-functional attribute, component, database, maintainability, resilience effect, fundamental organization, software system, component, relationship, environment, principles, design, evolution, related system, named software unit, coherent set of functionality, collection of services, coherent unit of functionality, module, named set of components</p><p>architectural design, product lifetime, software reuse, number of users, software compatibility, planned schedule, team capacity, budget, large-scale components, cross-cutting concerns, major concern, complexity, local data, separation of concerns, related functionality, implement once, stable interface</p><p>distribution architecture, client-server architecture, web-based software product, mobile software product, client, load balancer, server, web, database, Model-View-Controller pattern, MVC, multi-tier client server architecture, object-oriented approach, shared database, structured data, concurrent update, business system, local servers, service-oriented architecture, change regularly, scalability, resilience to failure, peer to peer architecture, message bus architecture</p><p>technological consideration, database, delivery platform, server, open source platform, development technology</p><p>detailed design, design principle, class diagram, cohesion, understandability, maintainability, reliability, coupling, abstraction, encapsulation, information hiding, separation of interface, separation of implementation, public interface, decomposition, modularisation</p><h2 id="key-linkage-between-atomic-terms"><a class="markdownIt-Anchor" href="#key-linkage-between-atomic-terms"></a> Key linkage between atomic terms</h2><ol><li>term ‘feature’ <strong>aims to distinguish</strong> from ‘requirement’ coming from a customer (in software project), <strong>but similar</strong> in meaning.</li><li>personas <strong>will overlap</strong>, Sommerville advises using max 5 personas.</li><li>software product are <strong>recommended</strong> to use high-level scenario, <strong>different</strong> to use case scenario.</li><li>team member <strong>works individually</strong> on a subset of scenarios.</li><li><strong>get</strong> user involved in the development.</li><li>Sommerville recommends using 3-4 scenarios/persona.</li><li>requirement <strong>need</strong> to be: independent, coherent, relevant.</li><li>user stories may immediately <strong>suggest</strong> requirements.</li><li><strong>start</strong> by using product, <strong>but then</strong> think creatively about other/additional more efficient and interesting options.</li><li>design <strong>is</strong> the process of deciding how software will <strong>meet</strong> the requirements. Usually <strong>exclude</strong> detailed coding level.</li><li>maintainability <strong>vs</strong> performance</li><li>security <strong>vs</strong> usability</li><li>availability <strong>vs</strong> time to market and cost</li><li>major concern of designing architecture <strong>is</strong> complexity due to the number of components and their relationship, the latter <strong>increasing</strong> exponentially.</li><li>multi-tier client-server architecture <strong>is</strong> a client-server system with a shared database.</li><li>technologies need to be decided, since architectural design, as changing them later is difficult and expensive.</li><li></li></ol><h2 id="rule-to-categorize-atomic-terms"><a class="markdownIt-Anchor" href="#rule-to-categorize-atomic-terms"></a> Rule to categorize atomic terms</h2><ol><li>How close they link with others.</li><li>Are they belong to some existing categories.</li><li>No need to explicitly classify all these terms into different groups.</li></ol><h2 id="unfamiliar-terms"><a class="markdownIt-Anchor" href="#unfamiliar-terms"></a> Unfamiliar terms</h2><p>human angle</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;abstract&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#abstract&quot;&gt;&lt;/a&gt; Abstract&lt;/h2&gt;
&lt;p&gt;This note collect all terms occur in SEPP Lecture 6/7/</summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Software Engineering And Professional Practice" scheme="http://discover304.github.io/categories/University/LectureNote/Software-Engineering-And-Professional-Practice/"/>
    
    
    <category term="积累" scheme="http://discover304.github.io/tags/%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="系统" scheme="http://discover304.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="整理" scheme="http://discover304.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
    <category term="软件工程" scheme="http://discover304.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Professional Issues Note: Organisations 施工中~</title>
    <link href="http://discover304.github.io/2021/02/22/26-2-PI-Organisations/"/>
    <id>http://discover304.github.io/2021/02/22/26-2-PI-Organisations/</id>
    <published>2021-02-22T09:52:32.000Z</published>
    <updated>2021-03-07T00:58:24.009Z</updated>
    
    <content type="html"><![CDATA[<p>绝赞偷懒中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;绝赞偷懒中&lt;/p&gt;
</summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Software Engineering And Professional Practice" scheme="http://discover304.github.io/categories/University/LectureNote/Software-Engineering-And-Professional-Practice/"/>
    
    
    <category term="积累" scheme="http://discover304.github.io/tags/%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="系统" scheme="http://discover304.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="整理" scheme="http://discover304.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
    <category term="评论" scheme="http://discover304.github.io/tags/%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Software Engineering Terms Collection 1</title>
    <link href="http://discover304.github.io/2021/02/20/26-0-SEPP-term-collection/"/>
    <id>http://discover304.github.io/2021/02/20/26-0-SEPP-term-collection/</id>
    <published>2021-02-20T07:44:12.000Z</published>
    <updated>2021-02-25T00:53:25.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="abstraction"><a class="markdownIt-Anchor" href="#abstraction"></a> Abstraction</h2><p>This note collect all terms occur in SEPP Lecture 1/2/4/5. It would be helpful to recap what has learnt and what has already been abstracted away.</p><h2 id="pool-of-atomic-terms"><a class="markdownIt-Anchor" href="#pool-of-atomic-terms"></a> Pool of atomic terms</h2><p>small system, budget, reliability, complex interface, software development, requirement capture, design, construction, implementation, testing, debugging, maintenance, evolution, management, software engineering activity</p><p>needs, issues, stakeholder, prioritization, maintenance, <strong>evolving requirement</strong>, <strong>modelling language</strong>, UML, multiple level, architectural design, high-level design, detailed design, <strong>coding</strong>, <strong>unit test</strong>, code evolution, documentation, customer acceptance testing, <strong>cost</strong>, post release change, enhancing, coping with changing world, <strong>maintainability</strong></p><p>ordering activities, outcomes of activities, arrangement of people &amp; resources, planning in advance of execution, <strong>predicting cost/time/resources</strong>, <strong>risk reduction</strong>, monitoring, enabling their own adaptation</p><p>automating, business process, <strong>project based engineering</strong>, <strong>product based engineering</strong>, <strong>execution model</strong>, software product, stand-alone model, hybrid execution model, software as a service model, reusable software</p><p><strong>waterfall process</strong>, linear sequential life cycle model, plan-driven process, plan, change, unchangeable world, stage, safety system, embedded system, long lifetime system</p><p><strong>agile process</strong>, iteration of development, testing the software development process, communication, customer, developer, manager, tester, motivated individual, customer collaboration, unfinished features, most important features, iterative planning, honest plan, daily communication, working software</p><p>customer satisfaction, rapid delivery, principal measure of progress, daily co-operation, face-to-face conversation, continuous attention, technical excellence, good design, simplicity, self-organizing team, regular reflection on process, regular reflection on tuning of behaviour</p><p>high/low criticality, senior/junior developer, culture, order, culture that responds to change, culture that demands order</p><p>software requirement, organisation, <strong>requirements engineering</strong>, systematic handing of requirement</p><p><strong>functional requirements</strong>, <strong>non-functional requirements</strong>, ‘ilities’, efficiency, security, portability, usability, user experience, distinction</p><p>person, group, end user, customer paying for software, government regulator, system architect, software developer, software tester</p><p>elicitation, analysis, specification, validation, strict sequence, project failure</p><p><strong>elicitation source</strong>, goal, domain knowledge, business rule, operational environment, organizational environments, interview, scenario, prototype, facilitated meeting, observation, conflict, single consistent set of requirement, careful structured English, use case model, <strong>supporting text</strong>, <strong>formal specification</strong>, <strong>mathematically-based language</strong>, release, <strong>consistency check</strong>, <strong>completeness check</strong>, <strong>realism check</strong>, <strong>verifiability</strong>, <strong>measurable non-functional requirement</strong></p><p>use case, system’s behaviour, <strong>user</strong>, viewpoint of user, unit, coherent unit of functionality, <strong>actor</strong>, human user, <strong>external system</strong>, external device, further information, primary actor, messages, supporting actor, use case scenario, instance, guarantee, main success scenario, alternate success scenario, failure scenario, common user goal, trigger, pre-condition, assumption, stick figure, named oval, <strong>interaction</strong>, requirement specification, iterated requirement elicitation</p><p>graphical language, UML model, model-driven development, granularity, abstraction</p><h2 id="key-linkage-between-atomic-terms"><a class="markdownIt-Anchor" href="#key-linkage-between-atomic-terms"></a> Key linkage between atomic terms</h2><ol><li>waterfall model process which is <strong>also known as</strong> liner sequential life cycle model.</li><li>in agile process, development and testing activities are <strong>concurrent</strong></li><li>software development process is description of <strong>how</strong> different engineering tasks are ordered, planned and monitored.</li><li>maintenance <strong>is</strong> the art to manage evolving requirements.</li><li>project based engineering <strong>is</strong> based on customer.</li><li>product based engineering <strong>is</strong> based on developer, <strong>or</strong> the developer is the customer.</li><li>plan-driven process is <strong>not easy to</strong> make change.</li><li>waterfall model <strong>has no way</strong> go back to some previous stage.</li><li>agile process <strong>is able to</strong> react quickly to change.</li><li>working software <strong>is</strong> the principal measure of progress</li><li>the term <em>order</em> is the <strong>opposite</strong> to <em>change</em>.</li><li>requirement try ot <strong>avoid</strong> design.</li><li>requirement <strong>expressing</strong> what is desired, <strong>not</strong> how what is desired should be realized.</li><li>non-functional requirements may be <strong>more important than</strong> functional requirements.</li><li>distinction between non and functional requirements <strong>may not clear</strong>.</li><li>stakeholders <strong>are</strong> “any person or group who will be affected by the system, directly or indirectly”.</li><li>faulty requirement processes <strong>is the major source</strong> of project failure.</li><li>a user is anything <strong>external to</strong> the system which interacts with it.</li><li>actors <strong>are</strong> a kind of user who take an active part in the use case.</li><li>some stakeholders may be <strong>neither</strong> primary <strong>nor</strong> supporting actors.</li><li>a use case <strong>is</strong> a set scenario tied together <strong>by</strong> a common user goal.</li><li>in use case diagram, the line connecting different actors or use cases <strong>means</strong> possible interaction between them.</li><li>use cases primarily capture functional requirements, but sometimes non-functional requirements are attached to a use case.</li><li>in use cases diagram, interactions spelled out <strong>may</strong> be too detailed, <strong>may</strong> needlessly constrain design.</li><li>in use cases diagram, requirements not naturally associated with actors <strong>may</strong> be missed. (those automatically triggered by the system)</li></ol><h2 id="rule-to-categorize-atomic-terms"><a class="markdownIt-Anchor" href="#rule-to-categorize-atomic-terms"></a> Rule to categorize atomic terms</h2><ol><li>How close they link with others.</li><li>Are they belong to some existing categories.</li><li>No need to explicitly classify all these terms into different groups.</li></ol><h2 id="unfamiliar-terms"><a class="markdownIt-Anchor" href="#unfamiliar-terms"></a> Unfamiliar terms</h2><p>enabling their own adaptation, regular reflection, tuning of behaviour</p><!-- ## Abstract## Pool of atomic terms## Key linkage between atomic terms## Rule to categorize atomic terms1. How close they link with others.2. Are they belong to some existing categories.3. No need to explicitly classify all these terms into different groups.## Unfamiliar terms -->]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;abstraction&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#abstraction&quot;&gt;&lt;/a&gt; Abstraction&lt;/h2&gt;
&lt;p&gt;This note collect all terms occur in SEPP Lec</summary>
      
    
    
    
    <category term="University" scheme="http://discover304.github.io/categories/University/"/>
    
    <category term="LectureNote" scheme="http://discover304.github.io/categories/University/LectureNote/"/>
    
    <category term="Software Engineering And Professional Practice" scheme="http://discover304.github.io/categories/University/LectureNote/Software-Engineering-And-Professional-Practice/"/>
    
    
    <category term="积累" scheme="http://discover304.github.io/tags/%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="系统" scheme="http://discover304.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="整理" scheme="http://discover304.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
    <category term="软件工程" scheme="http://discover304.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Why Singleton Design Pattern Is Evil</title>
    <link href="http://discover304.github.io/2021/02/16/25-Why-singleton-design%E2%80%94pattern-is-eval/"/>
    <id>http://discover304.github.io/2021/02/16/25-Why-singleton-design%E2%80%94pattern-is-eval/</id>
    <published>2021-02-16T11:22:27.000Z</published>
    <updated>2021-02-21T04:00:38.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="key-discussion"><a class="markdownIt-Anchor" href="#key-discussion"></a> Key discussion</h2><p>Is the singleton design pattern an antipattern?</p><blockquote><p>The singleton pattern is controversial. Some people go so far as to say singletons are evil. Others have likened singletons to sharks; they cruise along unnoticed under the surface, then pop up and bite you. We’re going to argue that it is an antipattern to be avoided at all costs. There are only a few legitimate uses for it –– we’ll go over these, too.</p></blockquote><hr /><p>Negative side</p><ol><li>The singleton pattern is creational.</li><li>The biggest problem with the singleton pattern is that you assume there will only ever be one instance. This is a big assumption to make and often comes back to bite you. What you end up with is completely inflexible code.</li><li>Engineers often use singletons to provide a global access point. They are often used in place of a global variable that has a single instance. But most developers steer clear from global variables, and singletons should provoke the same response.</li><li>Singletons leave a trail of confusion</li><li>They inherently cause code to be tightly coupled. This makes faking them out under test rather difficult in many cases.</li><li>Singletons are bad when used with multi-threading because with just a single object, the options of threading are limited.</li><li>Singletons decrease performance.</li><li>more and more …</li></ol><hr /><p>Positive side</p><ol><li>A good standard when choosing to use a singleton or not is when having more than one instance is dangerous.</li><li>You need a logistical explanation for locking up the object.</li></ol><h2 id="other"><a class="markdownIt-Anchor" href="#other"></a> Other</h2><ol><li>There are three types of design patterns covered by the GoF: creational patterns, structural patterns, and behavioral patterns.</li></ol><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><p><a href="https://dzone.com/articles/singleton-anti-pattern">https://dzone.com/articles/singleton-anti-pattern</a></p><p><a href="https://www.contentful.com/blog/2020/05/12/singleton-pattern-evil-or-misused/">https://www.contentful.com/blog/2020/05/12/singleton-pattern-evil-or-misused/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;key-discussion&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#key-discussion&quot;&gt;&lt;/a&gt; Key discussion&lt;/h2&gt;
&lt;p&gt;Is the singleton design pattern an a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tabulation v.s. Recursion With Memory (Dynamic Programming)</title>
    <link href="http://discover304.github.io/2021/01/25/24-dynamic-programming/"/>
    <id>http://discover304.github.io/2021/01/25/24-dynamic-programming/</id>
    <published>2021-01-25T06:05:22.000Z</published>
    <updated>2021-02-21T03:52:51.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="question"><a class="markdownIt-Anchor" href="#question"></a> Question</h2><p>DP vs Recursion with memorization</p><p>I am wondering if that for any recursive function that can be translated into dynamic programming, is it always possible to also simply leave the function in its recursive form and apply a memorise wrapper to it as well? While we have clearly been shown there are many benefits to turning something into dynamic programming, I feel like some functions may be a lot easier to understand if they are in a recursive form and using a memorise function should help keep running costs low.</p><p>Such as the example in lecture 17 with seam carving, in my mind it would be considerably easier to understand what a function was doing if it worked backwards from the end point and recursively found the best path to that point, all why keeping running costs low due to a memorise wrapper.</p><h2 id="my-answer"><a class="markdownIt-Anchor" href="#my-answer"></a> My Answer</h2><p>In my opinion, the bottom-up method and the top-down with memory (or recursive with memory) are <strong>quite similar methods</strong>  (or they wouldn’t be classified as dynamic programming together).</p><ol><li>They both keep something in a list (maybe dimension higher than 1)</li><li>They both cut off the calculated recursion tree. Make sure recursion runs under polynomial-time.</li></ol><p>The difference between them is the way they fulfill the memory space and how they cut the recursion tree.</p><table><thead><tr><th>top-down with memory</th><th>bottom-up</th></tr></thead><tbody><tr><td>generate data in memory in a passive way</td><td>generate data in memory in an active way</td></tr><tr><td>when recursion algorithms visit a node, we store information</td><td>when we visit nodes in whatever order we like and then store information</td></tr><tr><td>when visiting a stored node, we call its value from memory</td><td>after observing the pattern of whole memory, we go through all nodes without repeatation</td></tr><tr><td>we compute while storing information while cutting redundant trees</td><td>we fulfill memory, then we find a way to cut redundant trees, and finally, we compute</td></tr></tbody></table><p>Hope this comparison table can help you with understanding.</p><p>(By the way, I think memory decorator is easier to understand and much more to implement too.)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;question&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#question&quot;&gt;&lt;/a&gt; Question&lt;/h2&gt;
&lt;p&gt;DP vs Recursion with memorization&lt;/p&gt;
&lt;p&gt;I am wonderin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Chinese Version Vocaloid AI Tuner Feasibility Test</title>
    <link href="http://discover304.github.io/2021/01/14/23-AI-tuner-feasibility-test/"/>
    <id>http://discover304.github.io/2021/01/14/23-AI-tuner-feasibility-test/</id>
    <published>2021-01-14T10:00:00.000Z</published>
    <updated>2021-02-21T03:51:59.214Z</updated>
    
    <content type="html"><![CDATA[<p>The purpose of this test is to show that there is correlation between modifiable argument in Vocaloid project file and quality of tuning.</p><p>What is Vocaloid? <a href="https://en.wikipedia.org/wiki/Vocaloid">Here is a link to wiki page</a>.</p><p>Vocaloid:</p><blockquote><p>Vocaloid (ボーカロイド, Bōkaroido) is a singing voice synthesizer software product. Its signal processing part was developed through a joint research project led by Kenmochi Hideki at the Pompeu Fabra University in Barcelona, Spain, in 2000 and was not originally intended to be a full commercial project. Backed by the Yamaha Corporation, it developed the software into the commercial product “Vocaloid” which was released in 2004.</p></blockquote><p>Project github repo: <a href="https://github.com/Discover304/AI-Tuner">https://github.com/Discover304/AI-Tuner</a></p><h2 id="prepare-dataset"><a class="markdownIt-Anchor" href="#prepare-dataset"></a> Prepare dataset</h2><p>In this part we will get a formated vsqx data in dictionary with 2 dimension infromation note and id.</p><ol><li>import vocaloid project (.vsqx) and extract all test related arguments (arg)</li><li>format all args to 960 length list where 960 is the time stamps</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># adding path to system</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.getcwd())</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the data index json file</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dataPath = os.path.join(os.getcwd(), <span class="string">&#x27;VocaloidVSQXCollection&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(dataPath,<span class="string">&quot;source.json&quot;</span>), <span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    source = json.load(f) <span class="comment"># source is a dictionary</span></span><br><span class="line">fileList = [source[sourceIndex][<span class="string">&quot;file&quot;</span>] <span class="keyword">for</span> sourceIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(source))]</span><br><span class="line"></span><br><span class="line">[print(<span class="built_in">str</span>(sourceIndex+<span class="number">1</span>) + <span class="string">&quot;. Thanks for the data from creator: &quot;</span> + source[sourceIndex][<span class="string">&quot;creator&quot;</span>] + <span class="string">&quot;\n\tSource of data: &quot;</span> + source[sourceIndex][<span class="string">&quot;website&quot;</span>] + <span class="string">&quot;\n&quot;</span>) <span class="keyword">for</span> sourceIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(source))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialise all reoslvers</span></span><br><span class="line"><span class="keyword">from</span> vocaloidDao <span class="keyword">import</span> vocaloidVSQXResolver</span><br><span class="line">resolverList = [vocaloidVSQXResolver(os.path.join(dataPath, fileName)) <span class="keyword">for</span> fileName <span class="keyword">in</span> fileList]</span><br></pre></td></tr></table></figure><pre><code>1. Thanks for the data from creator: 混音: リサRisaSource of data: https://www.vsqx.top/project/vn18012. Thanks for the data from creator: 扒谱：星葵/混音：seedkingSource of data: https://www.vsqx.top/project/vn17433. Thanks for the data from creator: N/ASource of data: https://www.vsqx.top/project/vn17844. Thanks for the data from creator: vsqx:DZ韦元子Source of data: https://www.vsqx.top/project/vn17525. Thanks for the data from creator: N/ASource of data: https://www.vsqx.top/project/vn17496. Thanks for the data from creator: 填词~超监督乌鸦，千年食谱颂vsqx~的的的的的说，制作~cocok7Source of data: https://www.vsqx.top/project/vn17987. Thanks for the data from creator: 伴奏：小野道ono (https://www.dizzylab.net/albums/d/dlep02/)Source of data: https://www.vsqx.top/project/vn17888. Thanks for the data from creator: 调/混:邪云 扒谱:天啦噜我的串串儿Source of data: https://www.vsqx.top/project/vn17969. Thanks for the data from creator: 扒谱：磷元素PSource of data: https://www.vsqx.top/project/vn175310. Thanks for the data from creator: N/ASource of data: https://www.vsqx.top/project/vn1778</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># resolve all original data in parallel way, and save them to loacl</span></span><br><span class="line"><span class="keyword">from</span> vocaloidDao <span class="keyword">import</span> parallelResolve</span><br><span class="line">print(<span class="string">&quot;It may take a while if the file are resolved for the first time.&quot;</span>)</span><br><span class="line">parallelResolve(resolverList)</span><br></pre></td></tr></table></figure><pre><code>It may take a while if the file are resolved for the first time.local computer has: 16 coresParallal computing takes 0.00 seconds to finish.</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># load saved data</span></span><br><span class="line">VocaloidDataDfs = [resolver.loadFormatedVocaloidData() <span class="keyword">for</span> resolver <span class="keyword">in</span> resolverList]</span><br><span class="line"></span><br><span class="line"><span class="comment"># import as dataframe</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line">VocaloidDataDf = pd.DataFrame()</span><br><span class="line"><span class="keyword">for</span> VocaloidDataDfIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(VocaloidDataDfs)):</span><br><span class="line">    VocaloidDataDf = VocaloidDataDf.append(VocaloidDataDfs[VocaloidDataDfIndex])</span><br><span class="line">VocaloidDataDf = VocaloidDataDf.reset_index()</span><br><span class="line">VocaloidDataDf.head()</span><br></pre></td></tr></table></figure><pre><code>Log: loaded Log: loaded Log: loaded Log: loaded Log: loaded Log: loaded Log: loaded Log: loaded Log: loaded Log: loaded </code></pre><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>index</th>      <th>D</th>      <th>G</th>      <th>W</th>      <th>P</th>      <th>S</th>      <th>VEL</th>      <th>T</th>      <th>OPE</th>      <th>DUR</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 6...</td>      <td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...</td>      <td>[127, 127, 127, 127, 127, 127, 127, 127, 127, ...</td>      <td>[90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 9...</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 6...</td>      <td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...</td>      <td>[127, 127, 127, 127, 127, 127, 127, 127, 127, ...</td>      <td>[30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 3...</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 6...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[2418, 2418, 2418, 2418, 2418, 2418, 2418, 241...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 6...</td>      <td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...</td>      <td>[127, 127, 127, 127, 127, 127, 127, 127, 127, ...</td>      <td>[150, 150, 150, 150, 150, 150, 150, 150, 150, ...</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 6...</td>      <td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...</td>      <td>[127, 127, 127, 127, 127, 127, 127, 127, 127, ...</td>      <td>[30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 3...</td>    </tr>    <tr>      <th>4</th>      <td>4</td>      <td>[55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 5...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>      <td>[64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 6...</td>      <td>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...</td>      <td>[127, 127, 127, 127, 127, 127, 127, 127, 127, ...</td>      <td>[30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 3...</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2248</span>*<span class="number">9</span>*<span class="number">960</span></span><br></pre></td></tr></table></figure><pre><code>19422720</code></pre><h2 id="formating-data-before-evaluation"><a class="markdownIt-Anchor" href="#formating-data-before-evaluation"></a> Formating data before evaluation</h2><p>The above dataframe is scary, with 19 million data as 3 dimension. We have to reduce the data by extract the main features of each 960 vector, and join to a dataframe. So, the next challenge we face is how to extract this features.</p><p>We decide to take following data:</p><blockquote><ol><li>Continuous: VEL OPE DUR</li><li>Discrete: D G W P S</li></ol><ul><li>fearure without 0s:<ul><li>mid, mean, sd, mod</li></ul></li></ul><ol start="3"><li><code>Continuous</code> means one note one value, <code>Discrete</code> means one time stamp one value</li></ol></blockquote><p>See more: <a href="https://www.cnblogs.com/xingshansi/p/6815217.html">https://www.cnblogs.com/xingshansi/p/6815217.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zcr</span>(<span class="params">dataArray</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get discrete args fearure</span></span><br><span class="line">discreteArgsDf = VocaloidDataDf[[<span class="string">&quot;VEL&quot;</span>,<span class="string">&quot;OPE&quot;</span>,<span class="string">&quot;DUR&quot;</span>]].applymap(<span class="keyword">lambda</span> x : x[<span class="number">0</span>])</span><br><span class="line">discreteArgsDf.columns = discreteArgsDf.columns.<span class="built_in">map</span>(<span class="keyword">lambda</span> x : x+(<span class="string">&quot;-SINGLE&quot;</span>))</span><br><span class="line">discreteArgsDf.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>VEL-SINGLE</th>      <th>OPE-SINGLE</th>      <th>DUR-SINGLE</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>64</td>      <td>127</td>      <td>90</td>    </tr>    <tr>      <th>1</th>      <td>64</td>      <td>127</td>      <td>30</td>    </tr>    <tr>      <th>2</th>      <td>64</td>      <td>127</td>      <td>150</td>    </tr>    <tr>      <th>3</th>      <td>64</td>      <td>127</td>      <td>30</td>    </tr>    <tr>      <th>4</th>      <td>64</td>      <td>127</td>      <td>30</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get continuous args feature</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">## mean</span></span><br><span class="line">continuousArgsDf = pd.DataFrame()</span><br><span class="line">continuousArgsDf = VocaloidDataDf[[<span class="string">&quot;D&quot;</span>,<span class="string">&quot;G&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;P&quot;</span>,<span class="string">&quot;S&quot;</span>]].applymap(<span class="keyword">lambda</span> x : np.mean([i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i!=<span class="number">0</span>]+[<span class="number">0</span>]))</span><br><span class="line">continuousArgsDf.columns = continuousArgsDf.columns.<span class="built_in">map</span>(<span class="keyword">lambda</span> x : x+(<span class="string">&quot;-MEAN&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># without 0s</span></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"><span class="comment">## list all function we need </span></span><br><span class="line">aspectDict = &#123;<span class="string">&quot;-MID&quot;</span>: np.median, <span class="string">&quot;-SD&quot;</span>: np.std, <span class="string">&quot;-MOD&quot;</span>: <span class="keyword">lambda</span> x : stats.mode(x)[<span class="number">0</span>][<span class="number">0</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## prepare a mapping function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">appendAspect</span>(<span class="params"><span class="built_in">dict</span>, continuousArgsDf</span>):</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">dict</span>.keys():</span><br><span class="line">        continuousArgsDfTemp = VocaloidDataDf[[<span class="string">&quot;D&quot;</span>,<span class="string">&quot;G&quot;</span>,<span class="string">&quot;W&quot;</span>,<span class="string">&quot;P&quot;</span>,<span class="string">&quot;S&quot;</span>]].applymap(<span class="keyword">lambda</span> x : <span class="built_in">dict</span>[key]([i <span class="keyword">for</span> i <span class="keyword">in</span> x <span class="keyword">if</span> i!=<span class="number">0</span>]+[<span class="number">0</span>]))</span><br><span class="line">        continuousArgsDfTemp.columns = continuousArgsDfTemp.columns.<span class="built_in">map</span>(<span class="keyword">lambda</span> x : x+(key))</span><br><span class="line">        continuousArgsDf = continuousArgsDf.join(continuousArgsDfTemp,on=continuousArgsDf.index)</span><br><span class="line">    <span class="keyword">return</span> continuousArgsDf</span><br><span class="line"><span class="comment">## apply mapping function to our data set</span></span><br><span class="line">continuousArgsDf = appendAspect(aspectDict,continuousArgsDf)</span><br><span class="line"></span><br><span class="line">continuousArgsDf.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>D-MEAN</th>      <th>G-MEAN</th>      <th>W-MEAN</th>      <th>P-MEAN</th>      <th>S-MEAN</th>      <th>D-MID</th>      <th>G-MID</th>      <th>W-MID</th>      <th>P-MID</th>      <th>S-MID</th>      <th>D-SD</th>      <th>G-SD</th>      <th>W-SD</th>      <th>P-SD</th>      <th>S-SD</th>      <th>D-MOD</th>      <th>G-MOD</th>      <th>W-MOD</th>      <th>P-MOD</th>      <th>S-MOD</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>63.576159</td>      <td>0.0</td>      <td>0.0</td>      <td>2401.986755</td>      <td>0.0</td>      <td>64.0</td>      <td>0.0</td>      <td>0.0</td>      <td>2418.0</td>      <td>0.0</td>      <td>5.190972</td>      <td>0.0</td>      <td>0.0</td>      <td>196.121397</td>      <td>0.0</td>      <td>64</td>      <td>0</td>      <td>0</td>      <td>2418</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>53.225806</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>55.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>9.717658</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>55</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># join both discrete and continuous args dataframe</span></span><br><span class="line">argsDf = pd.DataFrame.join(discreteArgsDf, continuousArgsDf, on=discreteArgsDf.index)</span><br><span class="line"></span><br><span class="line">argsDf.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>VEL-SINGLE</th>      <th>OPE-SINGLE</th>      <th>DUR-SINGLE</th>      <th>D-MEAN</th>      <th>G-MEAN</th>      <th>W-MEAN</th>      <th>P-MEAN</th>      <th>S-MEAN</th>      <th>D-MID</th>      <th>G-MID</th>      <th>...</th>      <th>D-SD</th>      <th>G-SD</th>      <th>W-SD</th>      <th>P-SD</th>      <th>S-SD</th>      <th>D-MOD</th>      <th>G-MOD</th>      <th>W-MOD</th>      <th>P-MOD</th>      <th>S-MOD</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>64</td>      <td>127</td>      <td>90</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>...</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>64</td>      <td>127</td>      <td>30</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>...</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>2</th>      <td>64</td>      <td>127</td>      <td>150</td>      <td>63.576159</td>      <td>0.0</td>      <td>0.0</td>      <td>2401.986755</td>      <td>0.0</td>      <td>64.0</td>      <td>0.0</td>      <td>...</td>      <td>5.190972</td>      <td>0.0</td>      <td>0.0</td>      <td>196.121397</td>      <td>0.0</td>      <td>64</td>      <td>0</td>      <td>0</td>      <td>2418</td>      <td>0</td>    </tr>    <tr>      <th>3</th>      <td>64</td>      <td>127</td>      <td>30</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>...</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>4</th>      <td>64</td>      <td>127</td>      <td>30</td>      <td>53.225806</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>55.0</td>      <td>0.0</td>      <td>...</td>      <td>9.717658</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>55</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>    </tr>  </tbody></table><p>5 rows × 23 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get the rank list from our data list file (we has already import as json)</span></span><br><span class="line">rankList = []</span><br><span class="line"><span class="keyword">for</span> resolverIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(resolverList)):</span><br><span class="line">    noteNum = resolverList[resolverIndex].noteNum</span><br><span class="line">    rank = source[resolverIndex][<span class="string">&quot;rank&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(noteNum):</span><br><span class="line">        rankList+=[rank]</span><br><span class="line"><span class="comment">## format to data frame</span></span><br><span class="line">rankDf = pd.DataFrame(&#123;<span class="string">&quot;RANK&quot;</span>:rankList&#125;)</span><br><span class="line"></span><br><span class="line">rankDf.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>RANK</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>6</td>    </tr>    <tr>      <th>1</th>      <td>6</td>    </tr>    <tr>      <th>2</th>      <td>6</td>    </tr>    <tr>      <th>3</th>      <td>6</td>    </tr>    <tr>      <th>4</th>      <td>6</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># join our args rank dataframe together</span></span><br><span class="line">dataDf = argsDf.join(rankDf, on=rankDf.index)</span><br><span class="line"></span><br><span class="line">dataDf.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>VEL-SINGLE</th>      <th>OPE-SINGLE</th>      <th>DUR-SINGLE</th>      <th>D-MEAN</th>      <th>G-MEAN</th>      <th>W-MEAN</th>      <th>P-MEAN</th>      <th>S-MEAN</th>      <th>D-MID</th>      <th>G-MID</th>      <th>...</th>      <th>G-SD</th>      <th>W-SD</th>      <th>P-SD</th>      <th>S-SD</th>      <th>D-MOD</th>      <th>G-MOD</th>      <th>W-MOD</th>      <th>P-MOD</th>      <th>S-MOD</th>      <th>RANK</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>64</td>      <td>127</td>      <td>90</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>...</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>6</td>    </tr>    <tr>      <th>1</th>      <td>64</td>      <td>127</td>      <td>30</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>...</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>6</td>    </tr>    <tr>      <th>2</th>      <td>64</td>      <td>127</td>      <td>150</td>      <td>63.576159</td>      <td>0.0</td>      <td>0.0</td>      <td>2401.986755</td>      <td>0.0</td>      <td>64.0</td>      <td>0.0</td>      <td>...</td>      <td>0.0</td>      <td>0.0</td>      <td>196.121397</td>      <td>0.0</td>      <td>64</td>      <td>0</td>      <td>0</td>      <td>2418</td>      <td>0</td>      <td>6</td>    </tr>    <tr>      <th>3</th>      <td>64</td>      <td>127</td>      <td>30</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.0</td>      <td>0.0</td>      <td>...</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>6</td>    </tr>    <tr>      <th>4</th>      <td>64</td>      <td>127</td>      <td>30</td>      <td>53.225806</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>55.0</td>      <td>0.0</td>      <td>...</td>      <td>0.0</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>55</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>0</td>      <td>6</td>    </tr>  </tbody></table><p>5 rows × 24 columns</p></div><h2 id="clean-our-data"><a class="markdownIt-Anchor" href="#clean-our-data"></a> Clean our data</h2><ol><li>delete all data that the dur longer than 1.5*IQR</li><li>remove all 0 column</li></ol><p>Notice: any other cleaning process should be done in this step</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = np.quantile(dataDf[<span class="string">&#x27;DUR-SINGLE&#x27;</span>],<span class="number">0.25</span>)</span><br><span class="line">h = np.quantile(dataDf[<span class="string">&#x27;DUR-SINGLE&#x27;</span>],<span class="number">0.75</span>)</span><br><span class="line">IQR = h+<span class="number">1.5</span>*(h-l)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataDf = dataDf[dataDf[<span class="string">&#x27;DUR-SINGLE&#x27;</span>]&lt;=IQR].reset_index()</span><br><span class="line">dataDf = dataDf.drop(columns=[<span class="string">&quot;index&quot;</span>])</span><br><span class="line">dataDf = dataDf.transpose()[dataDf.<span class="built_in">any</span>().values].transpose()</span><br></pre></td></tr></table></figure><h2 id="observe-data"><a class="markdownIt-Anchor" href="#observe-data"></a> Observe data</h2><p>Perform the following steps:</p><ol><li>normalise our dataset (we choose to use normaliser instead of standardiser, because there is a limit in the score which is about 100, it is more meaningful if we use normaliser)</li><li>play with data to see if there are some observable trend of data</li><li>plot the heat map of regression coefficient, and leave one argument from the pair with higher value</li><li>fit to PCA modle, plot the corresponding percentage variance in a scree plot, combine the first several PCA</li><li>regress the MSE of sound onto the combined PCA</li></ol><p>If the MSE is reasonaly small, we can accept this result.</p><h3 id="normalisation-and-standardization"><a class="markdownIt-Anchor" href="#normalisation-and-standardization"></a> Normalisation and Standardization</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># define a normaliser</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalizer</span>(<span class="params">dataArray</span>):</span></span><br><span class="line">    <span class="keyword">if</span> dataArray.<span class="built_in">max</span>() - dataArray.<span class="built_in">min</span>() == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> dataArray</span><br><span class="line">    <span class="keyword">return</span> (dataArray-dataArray.<span class="built_in">min</span>())/(dataArray.<span class="built_in">max</span>() - dataArray.<span class="built_in">min</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># define a standardizer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">standardizer</span>(<span class="params">dataArray</span>):</span></span><br><span class="line">    <span class="keyword">if</span> dataArray.<span class="built_in">max</span>() - dataArray.<span class="built_in">min</span>() == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> dataArray</span><br><span class="line">    <span class="keyword">return</span> (dataArray-dataArray.mean())/dataArray.std()</span><br><span class="line"></span><br><span class="line">dataDfNormalized = dataDf.apply(normalizer)</span><br><span class="line">dataDfNormalized.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>VEL-SINGLE</th>      <th>OPE-SINGLE</th>      <th>DUR-SINGLE</th>      <th>D-MEAN</th>      <th>G-MEAN</th>      <th>P-MEAN</th>      <th>S-MEAN</th>      <th>D-MID</th>      <th>G-MID</th>      <th>P-MID</th>      <th>S-MID</th>      <th>D-SD</th>      <th>G-SD</th>      <th>P-SD</th>      <th>S-SD</th>      <th>D-MOD</th>      <th>G-MOD</th>      <th>P-MOD</th>      <th>S-MOD</th>      <th>RANK</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0.503937</td>      <td>1.0</td>      <td>0.198614</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.500042</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.499785</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.499785</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>1</th>      <td>0.503937</td>      <td>1.0</td>      <td>0.060046</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.500042</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.499785</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.499785</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>2</th>      <td>0.503937</td>      <td>1.0</td>      <td>0.337182</td>      <td>0.503959</td>      <td>0.0</td>      <td>0.648399</td>      <td>0.0</td>      <td>0.503937</td>      <td>0.0</td>      <td>0.648429</td>      <td>0.0</td>      <td>0.151537</td>      <td>0.0</td>      <td>0.083406</td>      <td>0.0</td>      <td>0.503937</td>      <td>0.0</td>      <td>0.648429</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>3</th>      <td>0.503937</td>      <td>1.0</td>      <td>0.060046</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.500042</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.499785</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.499785</td>      <td>0.0</td>      <td>0.0</td>    </tr>    <tr>      <th>4</th>      <td>0.503937</td>      <td>1.0</td>      <td>0.060046</td>      <td>0.421914</td>      <td>0.0</td>      <td>0.500042</td>      <td>0.0</td>      <td>0.433071</td>      <td>0.0</td>      <td>0.499785</td>      <td>0.0</td>      <td>0.283683</td>      <td>0.0</td>      <td>0.000000</td>      <td>0.0</td>      <td>0.433071</td>      <td>0.0</td>      <td>0.499785</td>      <td>0.0</td>      <td>0.0</td>    </tr>  </tbody></table></div><h3 id="starting-observe-data"><a class="markdownIt-Anchor" href="#starting-observe-data"></a> Starting observe data</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prepare for evaluation tool</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line"><span class="keyword">from</span> scipy.spatial <span class="keyword">import</span> Voronoi, voronoi_plot_2d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noiser</span>(<span class="params">df</span>):</span></span><br><span class="line">    <span class="keyword">return</span> df.applymap(<span class="keyword">lambda</span> x : x+np.random.random()*<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distributionPlot</span>(<span class="params">columnName0, columnName1, hueColumn, dataDfNormalized</span>):</span></span><br><span class="line">    <span class="comment"># getting data</span></span><br><span class="line">    dataPoints = dataDfNormalized[[columnName0, columnName1]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># adding noise</span></span><br><span class="line">    dataPointsWithNoise = noiser(dataDfNormalized)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plot the overview of the data</span></span><br><span class="line">    fig, ax = plt.subplots(<span class="number">1</span>, sharey=<span class="literal">True</span>)</span><br><span class="line">    sns.scatterplot(x = columnName0 ,y = columnName1, data = dataPointsWithNoise, hue=hueColumn, marker = <span class="string">&quot;o&quot;</span>, ax=ax)</span><br><span class="line">    plt.xlim([-<span class="number">0.01</span>,<span class="number">1.01</span>]), plt.ylim([-<span class="number">0.01</span>,<span class="number">1.01</span>])</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    https://stackoverflow.com/questions/20515554/colorize-voronoi-diagram/20678647#20678647</span></span><br><span class="line"><span class="string">    https://ipython-books.github.io/145-computing-the-voronoi-diagram-of-a-set-of-points/</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># add 4 distant dummy points to fix coloring problem</span></span><br><span class="line">    dataPoints = np.append((dataDfNormalized)[[<span class="string">&#x27;P-MEAN&#x27;</span>, <span class="string">&#x27;RANK&#x27;</span>]], [[<span class="number">2</span>,<span class="number">2</span>], [-<span class="number">2</span>,<span class="number">2</span>], [<span class="number">2</span>,-<span class="number">2</span>], [-<span class="number">2</span>,-<span class="number">2</span>]], axis = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plot Voronoi diagrame</span></span><br><span class="line">    <span class="comment">## since it the function in scipy return a figure rather an ax, </span></span><br><span class="line">    <span class="comment">## we can not plot both figure in the same figure by normal way, </span></span><br><span class="line">    <span class="comment">## this can be improved later </span></span><br><span class="line">    vor = Voronoi(dataPoints)</span><br><span class="line">    voronoi_plot_2d(vor, show_vertices = <span class="literal">True</span>, point_size = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># color list</span></span><br><span class="line">    colorList = []</span><br><span class="line">    <span class="keyword">for</span> regionIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vor.regions)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> -<span class="number">1</span> <span class="keyword">in</span> vor.regions[regionIndex]:</span><br><span class="line">            polygon = [vor.vertices[i] <span class="keyword">for</span> i <span class="keyword">in</span> vor.regions[regionIndex]]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(polygon) == <span class="number">0</span>:</span><br><span class="line">                colorList += colorList[-<span class="number">1</span>:]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            colorList += [np.array(polygon).transpose().<span class="built_in">min</span>()]</span><br><span class="line">        colorList += colorList[-<span class="number">1</span>:]</span><br><span class="line">    colorList = normalizer(np.array(colorList))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># colorize by the distance from 0 point</span></span><br><span class="line">    <span class="keyword">for</span> regionIndex <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vor.regions)):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> -<span class="number">1</span> <span class="keyword">in</span> vor.regions[regionIndex]:</span><br><span class="line">            polygon = [vor.vertices[i] <span class="keyword">for</span> i <span class="keyword">in</span> vor.regions[regionIndex]]</span><br><span class="line">            plt.fill(*<span class="built_in">zip</span>(*polygon),color=np.repeat(colorList[regionIndex],<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fix the range of axes</span></span><br><span class="line">    plt.xlim([-<span class="number">0.2</span>,<span class="number">1.2</span>]), plt.ylim([-<span class="number">0.2</span>,<span class="number">1.2</span>])</span><br><span class="line">    plt.xlabel(columnName0)</span><br><span class="line">    plt.ylabel(columnName1)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comparisionPlot</span>(<span class="params">columnName0, columnName1, dataDfNormalized</span>):</span></span><br><span class="line">    <span class="comment"># Plotting</span></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    gs1 = gridspec.GridSpec(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>)</span><br><span class="line">    ax1 = fig.add_subplot(gs1[:, <span class="number">0</span>])</span><br><span class="line">    ax2 = fig.add_subplot(gs1[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    ax3 = fig.add_subplot(gs1[<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    dataPointsWithNoise = noiser(dataDfNormalized)</span><br><span class="line">    sns.scatterplot(x = columnName0 ,y = columnName1, data = dataPointsWithNoise, hue=<span class="string">&quot;RANK&quot;</span>, marker = <span class="string">&quot;o&quot;</span>, ax = ax1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># noise half version high</span></span><br><span class="line">    dataPointsWithNoise = noiser(dataDfNormalized[dataDfNormalized[<span class="string">&quot;RANK&quot;</span>]&lt;<span class="number">0.5</span>])</span><br><span class="line">    sns.scatterplot(x = columnName0 ,y = columnName1, data = dataPointsWithNoise, hue=<span class="string">&quot;RANK&quot;</span>, marker = <span class="string">&quot;o&quot;</span>, ax = ax2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># noise half version low</span></span><br><span class="line">    dataPointsWithNoise = noiser(dataDfNormalized[dataDfNormalized[<span class="string">&quot;RANK&quot;</span>]&gt;<span class="number">0.5</span>])</span><br><span class="line">    sns.scatterplot(x = columnName0 ,y = columnName1, data = dataPointsWithNoise, hue=<span class="string">&quot;RANK&quot;</span>, marker = <span class="string">&quot;o&quot;</span>, ax = ax3)</span><br><span class="line"></span><br><span class="line">    ax1.set_xlim([<span class="number">0</span>,<span class="number">1.01</span>]), ax1.set_ylim([<span class="number">0</span>,<span class="number">1.01</span>])</span><br><span class="line">    ax2.set_xlim([<span class="number">0</span>,<span class="number">1.01</span>]), ax2.set_ylim([<span class="number">0</span>,<span class="number">1.01</span>])</span><br><span class="line">    ax3.set_xlim([<span class="number">0</span>,<span class="number">1.01</span>]), ax3.set_ylim([<span class="number">0</span>,<span class="number">1.01</span>])</span><br><span class="line"></span><br><span class="line">    ax1.set_title(<span class="string">&quot;Plot of &quot;</span> +columnName0+ <span class="string">&quot; v.s. &quot;</span> +columnName1)</span><br><span class="line">    ax2.set_title(<span class="string">&quot;Seperate Plot of Higher Rank Notes&quot;</span>)</span><br><span class="line">    ax3.set_title(<span class="string">&quot;Seperate Plot of Lower Rank Notes&quot;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">len</span>(dataDfNormalized.columns))</span><br><span class="line">dataDfNormalized.columns</span><br></pre></td></tr></table></figure><pre><code>20Index(['VEL-SINGLE', 'OPE-SINGLE', 'DUR-SINGLE', 'D-MEAN', 'G-MEAN', 'P-MEAN',       'S-MEAN', 'D-MID', 'G-MID', 'P-MID', 'S-MID', 'D-SD', 'G-SD', 'P-SD',       'S-SD', 'D-MOD', 'G-MOD', 'P-MOD', 'S-MOD', 'RANK'],      dtype='object')</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># distributionPlot(&#x27;DUR-SINGLE&#x27;,&#x27;P-SD&#x27;,&quot;RANK&quot;,dataDfNormalized)</span></span><br><span class="line">comparisionPlot(<span class="string">&#x27;DUR-SINGLE&#x27;</span>,<span class="string">&#x27;P-SD&#x27;</span>,dataDfNormalized)</span><br></pre></td></tr></table></figure><p><img src="output_22_0.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tempDf = dataDfNormalized[dataDfNormalized[<span class="string">&#x27;P-SD&#x27;</span>]!=<span class="number">0</span>]</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">plt.bar([<span class="string">&quot;High rank&quot;</span>,<span class="string">&quot;Low rank&quot;</span>],[tempDf[tempDf[<span class="string">&#x27;RANK&#x27;</span>]&lt;<span class="number">0.5</span>][<span class="string">&#x27;P-SD&#x27;</span>].mean(), tempDf[tempDf[<span class="string">&#x27;RANK&#x27;</span>]&gt;<span class="number">0.5</span>][<span class="string">&#x27;P-SD&#x27;</span>].mean()])</span><br><span class="line">plt.ylabel(<span class="string">&quot;Mean P-SD&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_23_0.png" alt="" /></p><h4 id="observation-1"><a class="markdownIt-Anchor" href="#observation-1"></a> Observation 1</h4><ul><li>The better the performance of a note in competition, the wider the pitch distributed and this trend can be seen along all duration value.<ul><li>A better tuner is more likly to change the pitch.</li></ul></li></ul><h3 id="pca"><a class="markdownIt-Anchor" href="#pca"></a> PCA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataDfNormalized.columns</span><br></pre></td></tr></table></figure><pre><code>Index(['VEL-SINGLE', 'OPE-SINGLE', 'DUR-SINGLE', 'D-MEAN', 'G-MEAN', 'P-MEAN',       'S-MEAN', 'D-MID', 'G-MID', 'P-MID', 'S-MID', 'D-SD', 'G-SD', 'P-SD',       'S-SD', 'D-MOD', 'G-MOD', 'P-MOD', 'S-MOD', 'RANK'],      dtype='object')</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line">pca = PCA(n_components=(<span class="built_in">len</span>(dataDfNormalized.columns[:-<span class="number">1</span>])))</span><br><span class="line">pca.fit(dataDfNormalized[dataDfNormalized.columns[:-<span class="number">1</span>]].values)</span><br><span class="line">pca_result = pca.transform(dataDfNormalized[dataDfNormalized.columns[:-<span class="number">1</span>]].values)</span><br><span class="line">sns.scatterplot(x=pca_result[:,<span class="number">0</span>], y=pca_result[:,<span class="number">1</span>], hue=dataDfNormalized[<span class="string">&quot;RANK&quot;</span>])</span><br><span class="line">plt.xlabel(<span class="string">&quot;PC1&quot;</span>), plt.ylabel(<span class="string">&quot;PC2&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_27_0.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sns.pointplot(y = [np.<span class="built_in">sum</span>(pca.explained_variance_ratio_[:i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)], x = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">plt.xlabel(<span class="string">&quot;PCs&quot;</span>), plt.ylabel(<span class="string">&quot;Explain&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_28_0.png" alt="" /></p><h3 id="linear-regression"><a class="markdownIt-Anchor" href="#linear-regression"></a> linear regression</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.formula.api <span class="keyword">as</span> smf</span><br><span class="line"></span><br><span class="line">pcs = dataDfNormalized[[<span class="string">&quot;RANK&quot;</span>]].join(pd.DataFrame(&#123;<span class="string">&quot;PC1&quot;</span>:pca_result[:,<span class="number">0</span>]&#125;),on=dataDfNormalized.index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>): <span class="comment"># we take first 8 value</span></span><br><span class="line">    pcs = pcs.join(pd.DataFrame(&#123;<span class="string">&quot;PC&quot;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>):pca_result[:,i]&#125;),on=dataDfNormalized.index)</span><br><span class="line"></span><br><span class="line">model = smf.ols(<span class="string">&#x27;RANK ~ PC1 + PC2  + PC3 + PC4&#x27;</span>, data=pcs)</span><br><span class="line">result = model.fit()</span><br><span class="line"></span><br><span class="line">result.summary()</span><br></pre></td></tr></table></figure><table class="simpletable"><caption>OLS Regression Results</caption><tr>  <th>Dep. Variable:</th>          <td>RANK</td>       <th>  R-squared:         </th> <td>   0.131</td></tr><tr>  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.130</td></tr><tr>  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   106.3</td></tr><tr>  <th>Date:</th>             <td>Mon, 11 Jan 2021</td> <th>  Prob (F-statistic):</th> <td>1.68e-84</td></tr><tr>  <th>Time:</th>                 <td>21:21:21</td>     <th>  Log-Likelihood:    </th> <td>  71.223</td></tr><tr>  <th>No. Observations:</th>      <td>  2832</td>      <th>  AIC:               </th> <td>  -132.4</td></tr><tr>  <th>Df Residuals:</th>          <td>  2827</td>      <th>  BIC:               </th> <td>  -102.7</td></tr><tr>  <th>Df Model:</th>              <td>     4</td>      <th>                     </th>     <td> </td>   </tr><tr>  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   </tr></table><table class="simpletable"><tr>      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr><tr>  <th>Intercept</th> <td>    0.5392</td> <td>    0.004</td> <td>  121.492</td> <td> 0.000</td> <td>    0.530</td> <td>    0.548</td></tr><tr>  <th>PC1</th>       <td>   -0.3301</td> <td>    0.018</td> <td>  -18.183</td> <td> 0.000</td> <td>   -0.366</td> <td>   -0.295</td></tr><tr>  <th>PC2</th>       <td>    0.1395</td> <td>    0.020</td> <td>    6.862</td> <td> 0.000</td> <td>    0.100</td> <td>    0.179</td></tr><tr>  <th>PC3</th>       <td>   -0.1090</td> <td>    0.027</td> <td>   -4.036</td> <td> 0.000</td> <td>   -0.162</td> <td>   -0.056</td></tr><tr>  <th>PC4</th>       <td>   -0.1681</td> <td>    0.030</td> <td>   -5.599</td> <td> 0.000</td> <td>   -0.227</td> <td>   -0.109</td></tr></table><table class="simpletable"><tr>  <th>Omnibus:</th>       <td>28.744</td> <th>  Durbin-Watson:     </th> <td>   0.186</td></tr><tr>  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  19.880</td></tr><tr>  <th>Skew:</th>          <td>-0.076</td> <th>  Prob(JB):          </th> <td>4.82e-05</td></tr><tr>  <th>Kurtosis:</th>      <td> 2.619</td> <th>  Cond. No.          </th> <td>    6.77</td></tr></table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcs = pcs.join(pd.DataFrame(&#123;<span class="string">&quot;RANK-PREDICT&quot;</span>:result.fittedvalues&#125;), on=pcs.index)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># the square error</span></span><br><span class="line">np.<span class="built_in">sum</span>(np.power(pcs[<span class="string">&quot;RANK&quot;</span>]-pcs[<span class="string">&quot;RANK-PREDICT&quot;</span>],<span class="number">2</span>))</span><br></pre></td></tr></table></figure><pre><code>157.6792358196176</code></pre><h2 id="visualise-our-regression-result"><a class="markdownIt-Anchor" href="#visualise-our-regression-result"></a> Visualise our regression result</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">sns.scatterplot(x=<span class="string">&quot;PC1&quot;</span>, y=<span class="string">&quot;RANK&quot;</span>, data=pcs, marker=<span class="string">&quot;o&quot;</span>)</span><br><span class="line">sns.scatterplot(x=<span class="string">&quot;PC1&quot;</span>, y=<span class="string">&quot;RANK-PREDICT&quot;</span>, data=pcs, hue=np.<span class="built_in">abs</span>(pcs[<span class="string">&quot;RANK&quot;</span>]-pcs[<span class="string">&quot;RANK-PREDICT&quot;</span>]), marker=<span class="string">&quot;o&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_34_0.png" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">ax = plt.subplot(<span class="number">111</span>, projection=<span class="string">&quot;3d&quot;</span>)</span><br><span class="line">ax.scatter(pcs.PC1, pcs.PC2, pcs.RANK, c=pcs.RANK)</span><br><span class="line"><span class="comment"># ax.scatter(pcs.PC1, pcs.PC2, pcs[[&quot;RANK-PREDICT&quot;]], c=np.abs(pcs[&quot;RANK&quot;]-pcs[&quot;RANK-PREDICT&quot;]), marker=&quot;x&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pcssample = pcs.sample(10).sort_values(by=&quot;RANK&quot;)</span></span><br><span class="line"><span class="comment"># ax.plot_surface(pcssample.PC1, pcssample.PC2, pcssample[[&quot;RANK-PREDICT&quot;]], rstride=1, cstride=1, cmap=&#x27;rainbow&#x27;)</span></span><br><span class="line"></span><br><span class="line">ax.set_xlabel(<span class="string">&quot;PC1&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;PC2&quot;</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&quot;RANK&quot;</span>)</span><br><span class="line"></span><br><span class="line">ax.view_init(<span class="number">20</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="output_35_0.png" alt="" /></p><h2 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion"></a> Conclusion</h2><p>There is a really low value of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>, less than 0.2, means the regression equation is not good enough to predict the Rank of a note from the properties we extracted from the 960 length vector. That might because of wrong choices of property, so, more research should be taken to varify the result we get in this notebook.</p><p>Next we can try to use the trend of a note to get a regression equation of it.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The purpose of this test is to show that there is correlation between modifiable argument in Vocaloid project file and quality of tuning.</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="GeneralNote" scheme="http://discover304.github.io/categories/NoteBook/GeneralNote/"/>
    
    
    <category term="Python" scheme="http://discover304.github.io/tags/Python/"/>
    
    <category term="记录" scheme="http://discover304.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="整理" scheme="http://discover304.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Agile v.s. Waterfall</title>
    <link href="http://discover304.github.io/2021/01/13/22-agile-vs-waterfall/"/>
    <id>http://discover304.github.io/2021/01/13/22-agile-vs-waterfall/</id>
    <published>2021-01-13T02:11:59.000Z</published>
    <updated>2021-02-21T04:01:31.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what-is-waterfall-methodology"><a class="markdownIt-Anchor" href="#what-is-waterfall-methodology"></a> What is Waterfall methodology?</h2><p>Waterfall Model methodology which is also known as Liner Sequential Life Cycle Model. Waterfall Model followed in the sequential order, and so project development team only moves to next phase of development or testing if the previous step completed successfully.</p><h2 id="what-is-the-agile-methodology"><a class="markdownIt-Anchor" href="#what-is-the-agile-methodology"></a> What is the Agile methodology?</h2><p>Agile methodology is a practice that helps continuous iteration of development and testing in the software development process. In this model, development and testing activities are concurrent, unlike the Waterfall model. This process allows more communication between customers, developers, managers, and testers.</p><hr /><h2 id="waterfall-vs-agile-key-difference"><a class="markdownIt-Anchor" href="#waterfall-vs-agile-key-difference"></a> Waterfall vs Agile Key Difference</h2><ul><li>Waterfall is a Liner Sequential Life Cycle Model whereas Agile is a continuous iteration of development and testing in the software development process.</li><li>In Agile vs Waterfall difference, the Agile methodology is known for its flexibility whereas Waterfall is a structured software development methodology.</li><li>Comparing the Waterfall methodology vs Agile which follows an incremental approach whereas the Waterfall is a sequential design process.</li><li>Agile performs testing concurrently with software development whereas in Waterfall methodology testing comes after the “Build” phase.</li><li>Agile allows changes in project development requirement whereas Waterfall has no scope of changing the requirements once the project development starts.</li></ul><hr /><h2 id="advantages-of-waterfall-model"><a class="markdownIt-Anchor" href="#advantages-of-waterfall-model"></a> Advantages of Waterfall Model</h2><ul><li>It is one the easiest model to manage. Because of its nature, each phase has specific deliverables and a review process.</li><li>It works well for smaller size projects where requirements are easily understandable.</li><li>Faster delivery of the project</li><li>Process and results are well documented.</li><li>Easily adaptable method for shifting teams</li><li>This project management methodology is beneficial to manage dependencies.</li></ul><h2 id="advantages-of-the-agile-model"><a class="markdownIt-Anchor" href="#advantages-of-the-agile-model"></a> Advantages of the Agile Model</h2><ul><li>It is focused client process. So, it makes sure that the client is continuously involved during every stage.</li><li>Agile teams are extremely motivated and self-organized so it likely to provide a better result from the development projects.</li><li>Agile software development method assures that quality of the development is maintained</li><li>The process is completely based on the incremental progress. Therefore, the client and team know exactly what is complete and what is not. - This reduces risk in the development process.</li></ul><hr /><h2 id="limitations-of-waterfall-model"><a class="markdownIt-Anchor" href="#limitations-of-waterfall-model"></a> Limitations of Waterfall Model</h2><ul><li>It is not an ideal model for a large size project</li><li>If the requirement is not clear at the beginning, it is a less effective method.</li><li>Very difficult to move back to makes changes in the previous phases.</li><li>The testing process starts once development is over. Hence, it has high chances of bugs to be found later in development where they are expensive to fix.</li></ul><h2 id="limitations-of-agile-model"><a class="markdownIt-Anchor" href="#limitations-of-agile-model"></a> Limitations of Agile Model</h2><ul><li>It is not useful method for small development projects.</li><li>It requires an expert to take important decisions in the meeting.</li><li>Cost of implementing an agile method is little more compared to other development methodologies.</li><li>The project can easily go off track if the project manager is not clear what outcome he/she wants.</li></ul><p><a href="https://www.guru99.com/waterfall-vs-agile.html#:~:text=Below%20is%20a%20difference%20between%20Agile%20and%20Waterfall,completed%20a%20...%20%2012%20more%20rows%20"><strong>Original Link</strong></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;what-is-waterfall-methodology&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-is-waterfall-methodology&quot;&gt;&lt;/a&gt; What is Waterfall methodology</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="GeneralNote" scheme="http://discover304.github.io/categories/NoteBook/GeneralNote/"/>
    
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="对比" scheme="http://discover304.github.io/tags/%E5%AF%B9%E6%AF%94/"/>
    
    <category term="笔记整理" scheme="http://discover304.github.io/tags/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
    <category term="知识" scheme="http://discover304.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
    <category term="软件开发" scheme="http://discover304.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>UoE UG2 Inf Course Research</title>
    <link href="http://discover304.github.io/2021/01/10/21-UG2-course-research/"/>
    <id>http://discover304.github.io/2021/01/10/21-UG2-course-research/</id>
    <published>2021-01-10T01:47:21.000Z</published>
    <updated>2021-02-21T04:15:43.001Z</updated>
    
    <content type="html"><![CDATA[<p>All these information are from <a href="https://course.inf.ed.ac.uk/">college homepage</a>.</p><h2 id="discrete-mathematics-and-probability-infr08031"><a class="markdownIt-Anchor" href="#discrete-mathematics-and-probability-infr08031"></a> Discrete Mathematics and Probability (INFR08031)</h2><p>KEYWORDS:</p><ol><li>SEM1</li><li><strong>fundamental topics</strong> in discrete mathematics</li><li><em>Mathematical Reasoning</em></li><li><em>presents standard mathematical reasoning and proof techniques such as proof by induction.</em><ul><li>THIS HAS ALREADY BEEN TAUGHT IN PPS</li></ul></li><li><strong>discrete</strong> and <strong>continuous</strong> probability theory</li><li>Feedback is given <strong>weekly</strong> in tutorials, when students can discuss their solutions to <strong>homework questions</strong>.</li><li>EXAM HOUR: <strong>2h</strong></li><li>READING LIST: <strong>Discrete Mathematics and its Applications by Kenneth Rosen</strong></li><li>Relations,Functions,Set Theory,Discrete and Continuous Probability,Conditional Probabilities,Proof</li></ol><h2 id="informatics-2c-introduction-to-computer-systems-infr08027"><a class="markdownIt-Anchor" href="#informatics-2c-introduction-to-computer-systems-infr08027"></a> Informatics 2C - Introduction to Computer Systems (INFR08027)</h2><p>KEYWORDS:</p><ol><li>SEM1</li><li><strong>design</strong>, <strong>implementation</strong> and <strong>engineering</strong> of <strong>digital</strong> computer systems</li><li>a brief introduction to the <strong>C programming language</strong></li><li>Coursework <strong>100</strong> %</li><li>READING LIST: D.A. Patterson and J.L. Hennessy, Computer Organisation and Design: The Hardware/Software Interface, 4th or 5th Edition, Morgan Kaufmann.</li><li>READING LIST: A. Silbershatz and P.B. Galvin, Operating Systems Concepts, 5/e, Wiley, 1998.</li><li>READING LIST: B.W. Kernighan and D.M. Ritchie, The C Programming Language, 2/e, Prentice Hall PTR, 1998.</li><li>Binary number system,instruction set architecture,computer organisation</li></ol><blockquote><p>On completion of this course, the student will be able to:<br />Describe the trade-offs in different binary representation systems.<br />Explain the principles of: instruction set architecture, digital logic design, cache hierarchy, virtual memory, I/O devices, exceptions and processor management.<br />Demonstrate an understanding of how a high-level programming language © maps to the assembly code by converting a simple C program to MIPS assembly.<br />Sketch the design of a simple single- and multi-cycle processor and explain how it operates by combining the knowledge of the logic design basics with that of the MIPS instruction set architecture.</p></blockquote><h2 id="informatics-2-foundations-of-data-science-infr08030"><a class="markdownIt-Anchor" href="#informatics-2-foundations-of-data-science-infr08030"></a> Informatics 2 - Foundations of Data Science (INFR08030)</h2><p>KEYWORDS:</p><ol><li>FULL YEAR</li><li><strong>a core set of</strong> knowledge, skills, and ways of thinking that are needed for data science</li><li>It brings together several strands: <strong>mathematical</strong> and computational techniques from <strong>statistics</strong> and <strong>machine learning</strong>; practical work with toolchains for <strong>data wrangling</strong>, <strong>analysis</strong>, and <strong>presentation</strong>; critical thinking and writing skills needed to evaluate and <strong>present claims</strong>; and <strong>case studies</strong> prompting discussion of the <strong>real world implications</strong> of data science.</li><li>complete a data science <strong>mini-project</strong></li><li><strong>Python</strong>-based ecosystem</li><li>EXAM HOUR: <strong>2h</strong></li><li>Latex</li><li>data science,statistics,machine learning</li><li>READING LIST: <strong>None</strong></li></ol><blockquote><p>A. Implications:</p><ul><li>Where does data come from? (Sample bias, data licensing and privacy issues)</li><li>Visualization: misleading plots, accessible design</li><li>Machine learning: algorithmic bias and discrimination</li></ul><p>B. Thinking, working, and writing:</p><ul><li>Claims and evidence: what can we conclude; analysis of errors</li><li>Reproducibility; programming “notebooks” vs modular code</li><li>Scientific communication; structure of a lab report</li><li>Reading and critique of data science articles</li></ul></blockquote><h2 id="informatics-2-introduction-to-algorithms-and-data-structures-infr08026"><a class="markdownIt-Anchor" href="#informatics-2-introduction-to-algorithms-and-data-structures-infr08026"></a> Informatics 2 - Introduction to Algorithms and Data Structures (INFR08026)</h2><p>KEYWORDS:</p><ol><li>FULL YEAR</li><li>a <strong>toolbox</strong> of standard algorithms and data structures</li><li>analyze both the <strong>theoretical complexity</strong> of algorithms and their <strong>practical behaviour</strong></li><li>including differences between <strong>theoretical</strong> and <strong>empirical</strong> analysis</li><li>knowledge and <strong>choice of existing algorithms and data structures</strong>, theoretical analysis, algorithmic strategies, and applications</li><li>Throughout, different specific algorithms and <strong>algorithmic strategies</strong> (such as divide-and-conquer, greedy, recursive backtracking, dynamic programming) will be introduced using <strong>real-world examples</strong>.</li><li>A previous course in <strong>discrete mathematics</strong> is strongly recommended.</li><li><strong>Oral feedback</strong> during tutorial and lab sessions. <strong>Written feedback</strong> on a formative assignment prior to summative practical assessment.</li><li>EXAM HOUR: <strong>2h</strong></li><li>Algorithms, Data Structures</li><li>READING LIST: <strong>Introduction to Algorithms, by Cormen, Leiserson, Rivest, Shamir.</strong></li></ol><blockquote><p>The following is an indicative list of topics covered:</p><ul><li>Asymptotic notation and algorithmic analysis</li><li>Sequential data structures (lists, stacks, queues)</li><li>Basic and more advanced sorting algorithms</li><li>Tree data structures, heaps and priority queues</li><li>Hashing and dictionaries</li><li>Graphs and graph algorithms</li><li>Dynamic programming</li><li>The classes P and NP</li></ul></blockquote><h2 id="informatics-2-software-engineering-and-professional-practice-infr08032"><a class="markdownIt-Anchor" href="#informatics-2-software-engineering-and-professional-practice-infr08032"></a> Informatics 2 - Software Engineering and Professional Practice (INFR08032)</h2><p>KEYWORDS:</p><ol><li>SEM2</li><li>practice of <strong>small team software development</strong></li><li><strong>experience developing a software system</strong> from scratch</li><li>analyzing requirements, designing and implementing new features, testing, version control</li><li><strong>guest lectures</strong> and some practical work</li><li>team up in <strong>groups of two</strong>, go ‘<strong>solo</strong>’ also accepted</li><li><strong>UML</strong> diagrams</li><li><strong>Java</strong></li><li><strong>iterative waterfall process</strong></li><li>There is room for interpretation, creativity, and some of the <strong>requirements change along the way</strong>.</li><li><strong>professional issues</strong> surrounding the problem</li><li>use of <strong>industry standard tools</strong> for software development, such as integrated development environments, version control, issue tracking</li><li>key elements of <strong>modern development practice</strong>, such as code review, peer review, and pair programming.</li><li>the <strong>legal</strong>, <strong>ethical</strong> and <strong>social context</strong> in which software and its authors exist</li><li><strong>Guest lecturers</strong> will speak on technical topics, but also on topics such as privacy, security, equality, democracy and intellectual property - some of which will have a direct impact on students’ practical work.</li><li>The assignment will consist of 3 parts, with the <strong>first two being iterated over</strong> after receiving formative feedback, and the requirement to maintain the whole solution consistent.</li><li>The <strong>assignment</strong> is based on the use of <strong>Software Engineering techniques</strong> (e.g. UML diagrams) and <strong>tools</strong> (e.g. version control), <strong>programming</strong>, <strong>reflective writing</strong>.</li><li><strong>Formative feedback will also be provided during drop-in lab sessions scheduled irregularly and more frequently as assignment deadlines are approaching, and during fortnightly tutorials.</strong></li><li><strong>For the third assignment, extra support in terms of a bookable 30-minute private meeting with a demonstrator will be made available.</strong></li><li>EXAM HOUR: <strong>2h</strong></li><li>Comfortably read and write <strong>technical documentation</strong>.</li><li>READING LIST: <strong>Sommerville 'Engineering Software Products’</strong></li><li>software engineering,professional practice,ethics</li></ol><h2 id="informatics-2d-reasoning-and-agents-infr08010"><a class="markdownIt-Anchor" href="#informatics-2d-reasoning-and-agents-infr08010"></a> Informatics 2D - Reasoning and Agents (INFR08010)</h2><p>KEYWORDS:</p><ol><li>SEM2</li><li>This course focuses on <strong>approaches</strong> relating to representation, reasoning and planning for <strong>solving real world inference</strong>.</li><li>Relevant QAA Computing Curriculum Sections: <strong>Artificial Intelligence</strong></li><li>READING LIST: Russell, S. &amp; Norvig, P., “<strong>AI: A Modern Approach</strong>”, Prentice Hall or Pearson, 2003. 2nd Edition. Thompson, S., “<strong>Haskell: The Craft of Functional Programming</strong>”, Addison Wesley, 1999.</li></ol><p>这是个大坑</p><h2 id="informatics-1-cognitive-science-infr08020"><a class="markdownIt-Anchor" href="#informatics-1-cognitive-science-infr08020"></a> Informatics 1 - Cognitive Science (INFR08020)</h2><p>KEYWORDS:</p><ol><li>SEM2</li><li><a href="http://www.inf.ed.ac.uk/teaching/courses/inf1-cg/reading.html">READING LIST</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;All these information are from &lt;a href=&quot;https://course.inf.ed.ac.uk/&quot;&gt;college homepage&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;discrete-mathematics-and-probabil</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="GeneralNote" scheme="http://discover304.github.io/categories/NoteBook/GeneralNote/"/>
    
    
    <category term="资料" scheme="http://discover304.github.io/tags/%E8%B5%84%E6%96%99/"/>
    
    <category term="记录" scheme="http://discover304.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="调查" scheme="http://discover304.github.io/tags/%E8%B0%83%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>拼图中的数据科学</title>
    <link href="http://discover304.github.io/2021/01/10/20-%E6%8B%BC%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    <id>http://discover304.github.io/2021/01/10/20-%E6%8B%BC%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/</id>
    <published>2021-01-10T01:27:54.000Z</published>
    <updated>2021-02-21T04:14:46.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拼图筛选流程"><a class="markdownIt-Anchor" href="#拼图筛选流程"></a> 拼图筛选流程：</h2><ol><li>抓出一把拼图<ul><li>注：一把的数量允许动态得调整</li></ul></li><li>铺展在桌面上</li><li>并行对非字母信息筛选并处理<ul><li>优质连块拼图<ul><li>取出</li></ul></li><li>形状是边界拼图<ul><li>取出</li></ul></li><li>字母向下<ul><li>翻面</li></ul></li></ul></li><li>并行对字母信息筛选并处理<ul><li>相似字母XY<ul><li>收集</li></ul></li><li>相似字母不再出现<ul><li>取出</li></ul></li></ul><ul><li>注：随机查找n次无结果</li></ul><ul><li>边界拼图<ul><li>取出</li></ul></li><li>已出现过的字母<ul><li>取出</li></ul></li><li>最后一组字母<ul><li>相似字母X<ul><li>收集X</li></ul></li></ul></li></ul><ul><li>相似字母不再出现<ol><li>取出X</li><li>直接收集Y</li><li>取出Y</li><li>注：随机查找n次无结果</li></ol></li></ul><ul><li>注释：仅支持两只手，左手字母靠前，右手字母靠后</li><li>注释：XY集合的选择靠特征，可选的组合有：AH、BDCG、EF</li></ul></li></ol><h2 id="拼图拼接流程"><a class="markdownIt-Anchor" href="#拼图拼接流程"></a> 拼图拼接流程</h2><ol><li>筛选最外边</li><li>拼接里边</li><li>开始拼</li><li>拼接部分</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;拼图筛选流程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#拼图筛选流程&quot;&gt;&lt;/a&gt; 拼图筛选流程：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;抓出一把拼图
&lt;ul&gt;
&lt;li&gt;注：一把的数量允许动态得调整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;铺</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="OtherNote" scheme="http://discover304.github.io/categories/NoteBook/OtherNote/"/>
    
    
    <category term="数据科学" scheme="http://discover304.github.io/tags/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    <category term="小创意" scheme="http://discover304.github.io/tags/%E5%B0%8F%E5%88%9B%E6%84%8F/"/>
    
    <category term="游戏" scheme="http://discover304.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>小型笔记整理</title>
    <link href="http://discover304.github.io/2021/01/10/19-encyclopedia/"/>
    <id>http://discover304.github.io/2021/01/10/19-encyclopedia/</id>
    <published>2021-01-10T01:22:55.000Z</published>
    <updated>2021-02-21T03:59:21.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="oop和aop"><a class="markdownIt-Anchor" href="#oop和aop"></a> OOP和AOP</h2><p>OOP面向对象编程，针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。而AOP则是针对业务处理过程中的切面进行提取，它所面对的是处理过程的某个步骤或阶段，以获得逻辑过程的中各部分之间低耦合的隔离效果。这两种设计思想在目标上有着本质的差异</p><p><a href="https://www.jianshu.com/p/2d634f128d3e">https://www.jianshu.com/p/2d634f128d3e</a></p><p>AOP出现的更深层次的原因可能是java只能继承单一父类这个性质</p><h2 id="计算机竞赛"><a class="markdownIt-Anchor" href="#计算机竞赛"></a> 计算机竞赛</h2><ul><li>ACM</li><li>leetcode</li><li>牛客网</li><li>阿里云天池</li><li>谷歌云kaggle</li><li>华为杯数学建模</li></ul><h2 id="jupyter-notebook-installation"><a class="markdownIt-Anchor" href="#jupyter-notebook-installation"></a> Jupyter NoteBook Installation</h2><p><a href="https://www.jianshu.com/p/91365f343585">https://www.jianshu.com/p/91365f343585</a><br />在使用前一定要找配置文件，修改默认存储路径。</p><p>常规的情况下，Windows和Linux/macOS的配置文件所在路径和配置文件名如下所述：</p><ul><li>Windows系统的配置文件路径：C:\Users&lt;user_name&gt;.jupyter\</li><li>Linux/macOS系统的配置文件路径：/Users/&lt;user_name&gt;/.jupyter/ 或 ~/.jupyter/</li><li>配置文件名：jupyter_notebook_config.py</li></ul><h2 id="编码藏匿在计算机软硬件背后的语言读后感列表"><a class="markdownIt-Anchor" href="#编码藏匿在计算机软硬件背后的语言读后感列表"></a> 《编码：藏匿在计算机软硬件背后的语言》，读后感列表</h2><ol><li>haskell和lisp等函数式语言是非冯诺依曼结构的编程语言，这类语言的函数式特点才应该是人工智能需要的啊</li><li>电脑真的是一点一点造出来的</li><li>近代CPU技术都是在原有的基础系统的主线上添加，然后用驱动使用这些功能。</li><li>CPU更多是线性的计算，这在矩阵计算时非常吃亏。</li><li>控制，存储，寻址，计算</li><li>虎头蛇尾，最后这本书的思路有些混乱，应该是在凑字数。</li><li>方块波是一个基准</li><li>模拟计算机的设计还是令人着迷</li><li>傅立叶变换</li><li>量子计算机</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;oop和aop&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#oop和aop&quot;&gt;&lt;/a&gt; OOP和AOP&lt;/h2&gt;
&lt;p&gt;OOP面向对象编程，针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。而AOP则</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="OtherNote" scheme="http://discover304.github.io/categories/NoteBook/OtherNote/"/>
    
    
    <category term="积累" scheme="http://discover304.github.io/tags/%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="扫盲" scheme="http://discover304.github.io/tags/%E6%89%AB%E7%9B%B2/"/>
    
    <category term="入门" scheme="http://discover304.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>音频特征提取 学习整理 施工中~</title>
    <link href="http://discover304.github.io/2021/01/05/18-%E9%9F%B3%E9%A2%91%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/"/>
    <id>http://discover304.github.io/2021/01/05/18-%E9%9F%B3%E9%A2%91%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/</id>
    <published>2021-01-05T10:09:28.000Z</published>
    <updated>2021-02-21T04:04:46.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过零率-zcr-zero-crossing-rate"><a class="markdownIt-Anchor" href="#过零率-zcr-zero-crossing-rate"></a> 过零率, ZCR (zero-crossing rate)</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;过零率-zcr-zero-crossing-rate&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#过零率-zcr-zero-crossing-rate&quot;&gt;&lt;/a&gt; 过零率, ZCR (zero-crossing rate)&lt;/h2&gt;
</summary>
      
    
    
    
    <category term="NoteBook" scheme="http://discover304.github.io/categories/NoteBook/"/>
    
    <category term="GeneralNote" scheme="http://discover304.github.io/categories/NoteBook/GeneralNote/"/>
    
    
    <category term="资料" scheme="http://discover304.github.io/tags/%E8%B5%84%E6%96%99/"/>
    
    <category term="积累" scheme="http://discover304.github.io/tags/%E7%A7%AF%E7%B4%AF/"/>
    
    <category term="学习" scheme="http://discover304.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
